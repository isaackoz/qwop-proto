syntax = "proto3";

package backend.auth.v1;

import "buf/validate/validate.proto";

option go_package = "./v1";

service AuthService {
  rpc RegisterUserInfo(RegisterUserInfoRequest) returns (RegisterUserInfoResponse) {};
  rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse) {};
  rpc CompleteRegistration(CompleteRegistrationRequest) returns (CompleteRegistrationResponse) {};
  rpc CheckUsernameAvailable(CheckUsernameAvailableRequest) returns (CheckUsernameAvailableResponse) {};
  rpc PasswordLogin(PasswordLoginRequest) returns (PasswordLoginResponse) {}
  rpc Logout(LogoutRequest) returns (LogoutResponse) {}
  rpc GetLoginMethod(GetLoginMethodRequest) returns (GetLoginMethodResponse) {}
  rpc GetMySession(GetMySessionRequest) returns (GetMySessionResponse) {}
}


message RegisterUserInfoRequest {
  string email = 1;
  string username = 2;
  string verification_key = 3;
}

message RegisterUserInfoResponse {}

message VerifyEmailRequest {
  string code = 1;
  string email = 2;
}

message VerifyEmailResponse {}

enum RegisterAuthType {
  REGISTER_AUTH_TYPE_UNSPECIFIED = 0;
  REGISTER_AUTH_TYPE_EMAIL = 1;
}

message CompleteRegistrationRequest {
  RegisterAuthType type = 1;
  optional string password = 2;
  string code = 3;
  string email = 4;
}

message CompleteRegistrationResponse {}

message CheckUsernameAvailableRequest {
  string username = 1 [
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 30
  ];
}

message CheckUsernameAvailableResponse {
  bool available = 1;
  optional string message = 2;
}

message PasswordLoginRequest {
  string email = 1 [(buf.validate.field).string.email = true];
  string password = 2;
}

message PasswordLoginResponse {}

message LogoutRequest {}
message LogoutResponse {}

message GetLoginMethodRequest {
  string email = 1 [
    (buf.validate.field).string.email = true
  ];
}

enum LoginMethodType {
  LOGIN_METHOD_TYPE_UNSPECIFIED = 0;
  LOGIN_METHOD_TYPE_PASSWORD = 1;
}

message GetLoginMethodResponse {
  LoginMethodType method_type = 1;
}

enum PlanType {
  PLAN_TYPE_UNSPECIFIED = 0;
  PLAN_TYPE_TRIAL = 1;
  PLAN_TYPE_TRIAL_EXPIRED = 2;
  PLAN_TYPE_PREMIUM = 3;
}

message GetMySessionRequest {}
message GetMySessionResponse {
  string username = 1;
  PlanType plan = 2;
  optional int32 days_remaining = 3;
}