syntax = "proto3";

package auth.v1;

import "common/v1/options.proto";

option go_package = "./v1";

service AuthService {
  rpc RegisterUserInfo(RegisterUserInfoRequest) returns (RegisterUserInfoResponse) {
    option (common.v1.public_route) = true;
  };
  rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse) {
    option (common.v1.public_route) = true;
  };
  rpc CompleteRegistration(CompleteRegistrationRequest) returns (CompleteRegistrationResponse) {
    option (common.v1.public_route) = true;
  };
  rpc CheckUsernameAvailable(CheckUsernameAvailableRequest) returns (CheckUsernameAvailableResponse) {
    option (common.v1.public_route) = true;
  };
  rpc PasswordLogin(PasswordLoginRequest) returns (PasswordLoginResponse) {
    option (common.v1.public_route) = true;
  }
  rpc Logout(LogoutRequest) returns (LogoutResponse) {
    option (common.v1.public_route) = true;
  }
  rpc RefreshSession(RefreshSessionRequest) returns (RefreshSessionResponse) {
    option (common.v1.public_route) = true;
  }
  rpc GetMySession(GetMySessionRequest) returns (GetMySessionResponse) {}
  rpc GetWsJWT(GetWsJWTRequest) returns (GetWsJWTResponse) {}
}


message RegisterUserInfoRequest {
  string email = 1;
  string username = 2;
  string verification_key = 3;
}

message RegisterUserInfoResponse {}

message VerifyEmailRequest {
  string code = 1;
  string email = 2;
}

message VerifyEmailResponse {}

enum RegisterAuthType {
  REGISTER_AUTH_TYPE_UNSPECIFIED = 0;
  REGISTER_AUTH_TYPE_EMAIL = 1;
}

message CompleteRegistrationRequest {
  RegisterAuthType type = 1;
  optional string password = 2;
  string code = 3;
  string email = 4;
}

message CompleteRegistrationResponse {}

message CheckUsernameAvailableRequest {
  string username = 1;
}

message CheckUsernameAvailableResponse {
  bool available = 1;
  optional string message = 2;
}

message PasswordLoginRequest {
  string email = 1;
  string password = 2;
}

message PasswordLoginResponse {}

message LogoutRequest {}
message LogoutResponse {}

enum PlanType {
  PLAN_TYPE_UNSPECIFIED = 0;
  PLAN_TYPE_TRIAL = 1;
  PLAN_TYPE_TRIAL_EXPIRED = 2;
  PLAN_TYPE_PREMIUM = 3;
}

message GetMySessionRequest {}
message GetMySessionResponse {
  string user_id = 1;
  optional string username = 2;
  RoleInfo role = 3;
  // unix seconds
  int64 access_token_expires_at = 4;
  // seconds
  int32 access_token_lifetime_seconds = 5;
}

message RoleInfo {
  bool is_pro = 1;
  bool is_trial = 2;
  int64 trial_expires_at = 3;
  bool trial_expired = 4;
  bool is_admin = 5;
}

message GetWsJWTRequest {}

message GetWsJWTResponse {
  string jwt = 1;
}

message RefreshSessionRequest {}

// should be the same as GetMySessionResponse
message RefreshSessionResponse {
  string user_id = 1;
  optional string username = 2;
  RoleInfo role = 3;
  // unix seconds
  int64 access_token_expires_at = 4;
}