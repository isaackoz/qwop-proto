syntax = "proto3";
import "google/protobuf/struct.proto";

package chat.v1;

option go_package = "./v1";

service ChatService {
  rpc Chat(ChatRequest) returns (stream ChatResponse);
  rpc GetConvo(GetConvoRequest) returns (GetConvoResponse);
  rpc GetHistory(GetHistoryRequest) returns (GetHistoryResponse);
  rpc GetRecentHistory(GetRecentHistoryRequest) returns (GetRecentHistoryResponse);
  rpc GetConvoFolders(GetConvoFoldersRequest) returns (GetConvoFoldersResponse);
  rpc CreateFolder(CreateFolderRequest) returns (CreateFolderResponse);
  rpc DeleteFolder(DeleteFolderRequest) returns (DeleteFolderResponse);
  rpc RenameFolder(RenameFolderRequest) returns (RenameFolderResponse);
  rpc DeleteConvo(DeleteConvoRequest) returns (DeleteConvoResponse);
  rpc RenameConvo(RenameConvoRequest) returns (RenameConvoResponse);
  rpc MoveConvoToFolder(MoveConvoToFolderRequest) returns (MoveConvoToFolderResponse);
  rpc MoveFolderPosition(MoveFolderPositionRequest) returns (MoveFolderPositionResponse);
  rpc GetFolderInstructions(GetFolderInstructionsRequest) returns (GetFolderInstructionsResponse);
  rpc UpdateFolderInstructions(UpdateFolderInstructionsRequest) returns (UpdateFolderInstructionsResponse);
  rpc CreatePersona(CreatePersonaRequest) returns (CreatePersonaResponse);
  rpc DeletePersona(DeletePersonaRequest) returns (DeletePersonaResponse);
  rpc UpdatePersona(UpdatePersonaRequest) returns (UpdatePersonaResponse);
  rpc SetPersonaAsDefault(SetPersonaAsDefaultRequest) returns (SetPersonaAsDefaultResponse);
  rpc GetPersonasList(GetPersonasListRequest) returns (GetPersonasListResponse);
  rpc GetPersonaDetails(GetPersonaDetailsRequest) returns (GetPersonaDetailsResponse);
  rpc GetDefaultPromptOptions(GetDefaultPromptOptionsRequest) returns (GetDefaultPromptOptionsResponse);
}

enum ChatModel {
  CHAT_MODEL_UNSPECIFIED = 0;
  CHAT_MODEL_GEMINI = 1;
  CHAT_MODEL_GROK = 2;
  CHAT_MODEL_CLAUDE = 3;
  CHAT_MODEL_OPENAI = 4;
  CHAT_MODEL_CUSTOM = 5;
}

message PromptOptions {
  // the default or last used persona
  optional string persona_id = 1;
  // the default or last used model
  optional ChatModel model = 2;
  bool reasoning = 3;
}

message GetDefaultPromptOptionsRequest {}

message GetDefaultPromptOptionsResponse {
  PromptOptions options = 1;
}

message GetPersonasListRequest {}

message GetPersonasListResponse {
  repeated Persona personas = 1;
}

message GetPersonaDetailsRequest {
  string id = 1;
}

message GetPersonaDetailsResponse {
  Persona persona = 1;
}

message Persona {
  string id = 1;
  string name = 2;
  string persona = 3;
  bool is_default = 4;
}

message DeletePersonaRequest {
  string id = 1;
}
message DeletePersonaResponse {}

message UpdatePersonaRequest {
  string id = 1;
  string name = 2;
  string persona = 3;
}

message UpdatePersonaResponse {}

message SetPersonaAsDefaultRequest {
  string id = 1;
}

message SetPersonaAsDefaultResponse {}

message CreatePersonaRequest {
  string name = 1;
  string persona = 2;
}

message CreatePersonaResponse {
  string id = 1;
}

message GetFolderInstructionsRequest {
  string folder_id = 1;
}

message GetFolderInstructionsResponse {
  string instructions = 1;
}

message UpdateFolderInstructionsRequest {
  string folder_id = 1;
  string instructions = 2;
}

message UpdateFolderInstructionsResponse {}

message RenameFolderRequest {
  string id = 1;
  string new_name = 2;
}

message RenameFolderResponse {
  ConvoFolder folder = 1;
}

message GetRecentHistoryRequest {}

message GetRecentHistoryResponse {
  repeated ConvoHistory conversations = 1;
}

message MoveFolderPositionRequest {
  string a_folder_id = 1;
  string b_folder_id = 2;
}

message MoveFolderPositionResponse {}

message DeleteConvoRequest {
  string id = 1;
}

message DeleteConvoResponse {}

message RenameConvoRequest {
  string id = 1;
  string new_title = 2;
}

message RenameConvoResponse {}

message MoveConvoToFolderRequest {
  string convo_id = 1;
  string folder_id = 2;
}

message MoveConvoToFolderResponse {}

message CreateFolderRequest {
  string name = 1;
}
message CreateFolderResponse {
  ConvoFolder folder = 1;
}

message DeleteFolderRequest {
  string id = 1;
  bool delete_children = 2;
}

message DeleteFolderResponse {}

message GetConvoFoldersRequest {}

message GetConvoFoldersResponse {
  repeated ConvoFolder folders = 1;
}

message ConvoFolder {
  string id = 1;
  string name = 2;
  int32 pos = 3;
}


message GetHistoryRequest {
  int32 limit = 1;
  int32 offset = 2;
  bool reverse = 3;
  optional string query = 4;
  optional string folder_id = 5;
}

message ConvoHistory {
  string id = 1;
  optional string title = 2;
  int64 updated_at = 3;
  int64 created_at = 4;
  optional string folder_id = 5;
}

message GetHistoryResponse {
  repeated ConvoHistory conversations = 1;
}

message GetConvoRequest {
  string id = 1;
}

message GetConvoResponse {
  Conversation conversation = 1;
}

message Conversation {
  string id = 1;
  optional string title = 2;
  optional int64 context_last_updated = 3;
  optional string context = 7;
  int64 created_at = 4;
  int64 updated_at = 5;
  optional string folder_id = 8;
  optional string persona_id = 9;
  repeated Message messages = 6;
}

enum MessageRole {
  MESSAGE_ROLE_UNSPECIFIED = 0;
  MESSAGE_ROLE_USER = 1; // user message
  MESSAGE_ROLE_ASSISTANT = 2; // assistant message
  MESSAGE_ROLE_SYSTEM = 3; // system message, e.g. instructions
  MESSAGE_ROLE_TOOL = 4;
}

message MessageVersion {
  string id = 1;
  int32 version_number = 2;
  int64 created_at = 3;
  repeated MessagePart parts = 4;
  bool pending = 5;
  optional string error = 6;
}

message Message {
  string id = 1;
  int32 position = 2;
  int32 index = 3;
  int64 created_at = 4;
  int64 updated_at = 5;
  MessageRole role = 6;
  repeated MessageVersion versions = 7;
}


// Parts making up a message.
// Parts are what we store in the database and contain all the data to render each part.
// They are tied 1-1 with their corresponding service below (i.e. text part with text service).
// The service is a stream of updates that modify the part in some way. The end result of a service 
// should be a complete part. In other words, the sum of all the deltas from a service should equal
// the final part stored in the message. 
message MessagePart {
  oneof part {
    TextPart text = 1;
    ThinkingPart thinking = 2;
  }
}

// A part representing text/markdown
message TextPart {
  string content = 1;
}

message ThinkingPartStep {
  string id = 1;
  // i.e. "Finding sources..." or "Thinking..."
  string summary = 2;
  // more detailed info, i.e. sources found, reasoning steps, etc.
  repeated string detail = 3;
}

message ThinkingPart {
  // i.e. "Thought for 24 seconds"
  string summary = 1;
  // the steps taken during the thinking/processing process
  repeated ThinkingPartStep steps = 2;
  // if we are using thinking from an llm that outputs it's thoughts, this is the complete thought. this gets passed as context to the llm
  optional string final_thought = 3;
}

message ChatOptions {
  // include tickers automatically inferred from chat or explicitly?
  bool ticker_auto = 1;
  repeated string ticker_ids = 2;
  // should we include trade journal automatically or explicitly?
  bool journal_auto = 3;
  repeated string journal_ids = 4;
  // should we fetch fresh data or re-use old calculations?
  bool fresh_data = 5;
  // shoud we automatically infer indicators from the query or explicitly set?
  bool indicator_auto = 6;
  // If set, use this persona for the chat. If it isn't it will use the default or last used persona.
  optional string persona_id = 7;
  // If set, will create the new convo in this folder and also include that folders instructions
  optional string folder_id = 8;
}

message ChatMeta {
  string timezone = 1;
  string locale = 2;
}

message ChatRequest {
  // The information this can either be a new chat/continuing, editing or retrying a message
  oneof info {
    ChatInfo chat = 1;
    EditInfo edit = 2;
    RetryInfo retry = 3;
  }
  ChatMeta meta = 6;
  ChatOptions options = 7;
}
// For retrying a (bot) message
message RetryInfo {
  string convo_id = 1;
  // the message to retry. This must be a bot/assistant role message. NOT the users message.
  string bot_message_id = 2;
  // Append some additional info to the original user message that triggered the bot message.
  optional string additional_info = 3;
}
// For editing an existing (user) message
message EditInfo {
  string convo_id = 1;
  // the message to edit. This must be a user role message.
  string user_message_id = 2;
  string new_query = 3;
}
// For a new convo or continuing a conversation. Appends the message at the end of the convo.
message ChatInfo {
  string query = 1;
  // if provided, the message will be added to a convo. If not, it will create a new convo
  // and return the new convo id in the NewConvoEvent
  optional string convo_id = 2;

}

message ChatResponse {
  oneof message {
    ServiceEvent service_event = 1;
    NewConvoEvent new_convo_event = 2;
    ErrorEvent error_event = 3;
  }
}

// After a new convo is created and the summary is created,
// we want to optimistically update the history in the sidebar with this data
message NewConvoEvent {
  string id = 1;
  string title = 2;
  optional string folder_id = 3; 
}

message ErrorEvent {
  string message = 1;
  optional string code = 2;
}



enum ServiceStatus {
  SERVICE_STATUS_UNSPECIFIED = 0;
  SERVICE_STATUS_STARTED = 1;
  SERVICE_STATUS_COMPLETED = 2;
  SERVICE_STATUS_ERROR = 3;
  SERVICE_STATUS_DATA = 4;
}

// The server decides ultimitaly which service to use. Right now we just have 
// chat, but in the future we will have more
message ServiceEvent {
  string id = 1;
  ServiceStatus status = 2;
  // code is an optional event code. i.e. for an error it could be "wrong_model" or something
  optional string code = 3;
  oneof data {
    TextService chat = 4;
    ThinkingService thinking = 5;
  }
}


// The text service is for a standard text stream.
// The delta is a partial response that should be appended to the current message.
// The final_response is the complete response that is the result of all the deltas combined.
message TextService {
  optional string delta = 1;
  optional string final_response = 2;
}

// The thinking service is used for either reasoning or to indicate progress on a multi-step task.
message ThinkingService {
  // Step id is unique to each step. It can be used to identify which step is being updated.
  // If step ID is not set, the other fields will be ignored (i.e. for a status update)
  optional string step_id = 1;
  // A brief summary of what this step is doing
  optional string step_summary = 2;
  // A more detailed update on the step's progress
  optional string step_update = 3;
  // If we are using thinking from an llm that outputs it's thoughts, delta is the partial thought
  optional string delta = 4;
  // final_thought is the complete thought that is the result of all the deltas combined.
  optional string final_thought = 5;
  // The summary of the thinking process. For example, this could be 
  // "Thinking..." or "Researching..." or "Thought for 24 seconds"
  optional string summary = 6;
}