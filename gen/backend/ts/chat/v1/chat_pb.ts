// @generated by protoc-gen-es v2.2.5 with parameter "target=ts"
// @generated from file chat/v1/chat.proto (package chat.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_protobuf_struct } from "@bufbuild/protobuf/wkt";
import type { Message as Message$1 } from "@bufbuild/protobuf";

/**
 * Describes the file chat/v1/chat.proto.
 */
export const file_chat_v1_chat: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_protobuf_struct]);

/**
 * @generated from message chat.v1.PromptOptions
 */
export type PromptOptions = Message$1<"chat.v1.PromptOptions"> & {
  /**
   * the default or last used persona
   *
   * @generated from field: optional string persona_id = 1;
   */
  personaId?: string;

  /**
   * the default or last used model
   *
   * @generated from field: optional chat.v1.ChatModel model = 2;
   */
  model?: ChatModel;

  /**
   * @generated from field: bool reasoning = 3;
   */
  reasoning: boolean;
};

/**
 * Describes the message chat.v1.PromptOptions.
 * Use `create(PromptOptionsSchema)` to create a new message.
 */
export const PromptOptionsSchema: GenMessage<PromptOptions> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 0);

/**
 * @generated from message chat.v1.GetDefaultPromptOptionsRequest
 */
export type GetDefaultPromptOptionsRequest = Message$1<"chat.v1.GetDefaultPromptOptionsRequest"> & {
};

/**
 * Describes the message chat.v1.GetDefaultPromptOptionsRequest.
 * Use `create(GetDefaultPromptOptionsRequestSchema)` to create a new message.
 */
export const GetDefaultPromptOptionsRequestSchema: GenMessage<GetDefaultPromptOptionsRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 1);

/**
 * @generated from message chat.v1.GetDefaultPromptOptionsResponse
 */
export type GetDefaultPromptOptionsResponse = Message$1<"chat.v1.GetDefaultPromptOptionsResponse"> & {
  /**
   * @generated from field: chat.v1.PromptOptions options = 1;
   */
  options?: PromptOptions;
};

/**
 * Describes the message chat.v1.GetDefaultPromptOptionsResponse.
 * Use `create(GetDefaultPromptOptionsResponseSchema)` to create a new message.
 */
export const GetDefaultPromptOptionsResponseSchema: GenMessage<GetDefaultPromptOptionsResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 2);

/**
 * @generated from message chat.v1.GetPersonasListRequest
 */
export type GetPersonasListRequest = Message$1<"chat.v1.GetPersonasListRequest"> & {
};

/**
 * Describes the message chat.v1.GetPersonasListRequest.
 * Use `create(GetPersonasListRequestSchema)` to create a new message.
 */
export const GetPersonasListRequestSchema: GenMessage<GetPersonasListRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 3);

/**
 * @generated from message chat.v1.GetPersonasListResponse
 */
export type GetPersonasListResponse = Message$1<"chat.v1.GetPersonasListResponse"> & {
  /**
   * @generated from field: repeated chat.v1.Persona personas = 1;
   */
  personas: Persona[];
};

/**
 * Describes the message chat.v1.GetPersonasListResponse.
 * Use `create(GetPersonasListResponseSchema)` to create a new message.
 */
export const GetPersonasListResponseSchema: GenMessage<GetPersonasListResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 4);

/**
 * @generated from message chat.v1.GetPersonaDetailsRequest
 */
export type GetPersonaDetailsRequest = Message$1<"chat.v1.GetPersonaDetailsRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message chat.v1.GetPersonaDetailsRequest.
 * Use `create(GetPersonaDetailsRequestSchema)` to create a new message.
 */
export const GetPersonaDetailsRequestSchema: GenMessage<GetPersonaDetailsRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 5);

/**
 * @generated from message chat.v1.GetPersonaDetailsResponse
 */
export type GetPersonaDetailsResponse = Message$1<"chat.v1.GetPersonaDetailsResponse"> & {
  /**
   * @generated from field: chat.v1.Persona persona = 1;
   */
  persona?: Persona;
};

/**
 * Describes the message chat.v1.GetPersonaDetailsResponse.
 * Use `create(GetPersonaDetailsResponseSchema)` to create a new message.
 */
export const GetPersonaDetailsResponseSchema: GenMessage<GetPersonaDetailsResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 6);

/**
 * @generated from message chat.v1.Persona
 */
export type Persona = Message$1<"chat.v1.Persona"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string persona = 3;
   */
  persona: string;

  /**
   * @generated from field: bool is_default = 4;
   */
  isDefault: boolean;
};

/**
 * Describes the message chat.v1.Persona.
 * Use `create(PersonaSchema)` to create a new message.
 */
export const PersonaSchema: GenMessage<Persona> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 7);

/**
 * @generated from message chat.v1.DeletePersonaRequest
 */
export type DeletePersonaRequest = Message$1<"chat.v1.DeletePersonaRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message chat.v1.DeletePersonaRequest.
 * Use `create(DeletePersonaRequestSchema)` to create a new message.
 */
export const DeletePersonaRequestSchema: GenMessage<DeletePersonaRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 8);

/**
 * @generated from message chat.v1.DeletePersonaResponse
 */
export type DeletePersonaResponse = Message$1<"chat.v1.DeletePersonaResponse"> & {
};

/**
 * Describes the message chat.v1.DeletePersonaResponse.
 * Use `create(DeletePersonaResponseSchema)` to create a new message.
 */
export const DeletePersonaResponseSchema: GenMessage<DeletePersonaResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 9);

/**
 * @generated from message chat.v1.UpdatePersonaRequest
 */
export type UpdatePersonaRequest = Message$1<"chat.v1.UpdatePersonaRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string persona = 3;
   */
  persona: string;
};

/**
 * Describes the message chat.v1.UpdatePersonaRequest.
 * Use `create(UpdatePersonaRequestSchema)` to create a new message.
 */
export const UpdatePersonaRequestSchema: GenMessage<UpdatePersonaRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 10);

/**
 * @generated from message chat.v1.UpdatePersonaResponse
 */
export type UpdatePersonaResponse = Message$1<"chat.v1.UpdatePersonaResponse"> & {
};

/**
 * Describes the message chat.v1.UpdatePersonaResponse.
 * Use `create(UpdatePersonaResponseSchema)` to create a new message.
 */
export const UpdatePersonaResponseSchema: GenMessage<UpdatePersonaResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 11);

/**
 * @generated from message chat.v1.SetPersonaAsDefaultRequest
 */
export type SetPersonaAsDefaultRequest = Message$1<"chat.v1.SetPersonaAsDefaultRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message chat.v1.SetPersonaAsDefaultRequest.
 * Use `create(SetPersonaAsDefaultRequestSchema)` to create a new message.
 */
export const SetPersonaAsDefaultRequestSchema: GenMessage<SetPersonaAsDefaultRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 12);

/**
 * @generated from message chat.v1.SetPersonaAsDefaultResponse
 */
export type SetPersonaAsDefaultResponse = Message$1<"chat.v1.SetPersonaAsDefaultResponse"> & {
};

/**
 * Describes the message chat.v1.SetPersonaAsDefaultResponse.
 * Use `create(SetPersonaAsDefaultResponseSchema)` to create a new message.
 */
export const SetPersonaAsDefaultResponseSchema: GenMessage<SetPersonaAsDefaultResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 13);

/**
 * @generated from message chat.v1.CreatePersonaRequest
 */
export type CreatePersonaRequest = Message$1<"chat.v1.CreatePersonaRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string persona = 2;
   */
  persona: string;
};

/**
 * Describes the message chat.v1.CreatePersonaRequest.
 * Use `create(CreatePersonaRequestSchema)` to create a new message.
 */
export const CreatePersonaRequestSchema: GenMessage<CreatePersonaRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 14);

/**
 * @generated from message chat.v1.CreatePersonaResponse
 */
export type CreatePersonaResponse = Message$1<"chat.v1.CreatePersonaResponse"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message chat.v1.CreatePersonaResponse.
 * Use `create(CreatePersonaResponseSchema)` to create a new message.
 */
export const CreatePersonaResponseSchema: GenMessage<CreatePersonaResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 15);

/**
 * @generated from message chat.v1.GetFolderInstructionsRequest
 */
export type GetFolderInstructionsRequest = Message$1<"chat.v1.GetFolderInstructionsRequest"> & {
  /**
   * @generated from field: string folder_id = 1;
   */
  folderId: string;
};

/**
 * Describes the message chat.v1.GetFolderInstructionsRequest.
 * Use `create(GetFolderInstructionsRequestSchema)` to create a new message.
 */
export const GetFolderInstructionsRequestSchema: GenMessage<GetFolderInstructionsRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 16);

/**
 * @generated from message chat.v1.GetFolderInstructionsResponse
 */
export type GetFolderInstructionsResponse = Message$1<"chat.v1.GetFolderInstructionsResponse"> & {
  /**
   * @generated from field: string instructions = 1;
   */
  instructions: string;
};

/**
 * Describes the message chat.v1.GetFolderInstructionsResponse.
 * Use `create(GetFolderInstructionsResponseSchema)` to create a new message.
 */
export const GetFolderInstructionsResponseSchema: GenMessage<GetFolderInstructionsResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 17);

/**
 * @generated from message chat.v1.UpdateFolderInstructionsRequest
 */
export type UpdateFolderInstructionsRequest = Message$1<"chat.v1.UpdateFolderInstructionsRequest"> & {
  /**
   * @generated from field: string folder_id = 1;
   */
  folderId: string;

  /**
   * @generated from field: string instructions = 2;
   */
  instructions: string;
};

/**
 * Describes the message chat.v1.UpdateFolderInstructionsRequest.
 * Use `create(UpdateFolderInstructionsRequestSchema)` to create a new message.
 */
export const UpdateFolderInstructionsRequestSchema: GenMessage<UpdateFolderInstructionsRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 18);

/**
 * @generated from message chat.v1.UpdateFolderInstructionsResponse
 */
export type UpdateFolderInstructionsResponse = Message$1<"chat.v1.UpdateFolderInstructionsResponse"> & {
};

/**
 * Describes the message chat.v1.UpdateFolderInstructionsResponse.
 * Use `create(UpdateFolderInstructionsResponseSchema)` to create a new message.
 */
export const UpdateFolderInstructionsResponseSchema: GenMessage<UpdateFolderInstructionsResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 19);

/**
 * @generated from message chat.v1.RenameFolderRequest
 */
export type RenameFolderRequest = Message$1<"chat.v1.RenameFolderRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string new_name = 2;
   */
  newName: string;
};

/**
 * Describes the message chat.v1.RenameFolderRequest.
 * Use `create(RenameFolderRequestSchema)` to create a new message.
 */
export const RenameFolderRequestSchema: GenMessage<RenameFolderRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 20);

/**
 * @generated from message chat.v1.RenameFolderResponse
 */
export type RenameFolderResponse = Message$1<"chat.v1.RenameFolderResponse"> & {
  /**
   * @generated from field: chat.v1.ConvoFolder folder = 1;
   */
  folder?: ConvoFolder;
};

/**
 * Describes the message chat.v1.RenameFolderResponse.
 * Use `create(RenameFolderResponseSchema)` to create a new message.
 */
export const RenameFolderResponseSchema: GenMessage<RenameFolderResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 21);

/**
 * @generated from message chat.v1.GetRecentHistoryRequest
 */
export type GetRecentHistoryRequest = Message$1<"chat.v1.GetRecentHistoryRequest"> & {
};

/**
 * Describes the message chat.v1.GetRecentHistoryRequest.
 * Use `create(GetRecentHistoryRequestSchema)` to create a new message.
 */
export const GetRecentHistoryRequestSchema: GenMessage<GetRecentHistoryRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 22);

/**
 * @generated from message chat.v1.GetRecentHistoryResponse
 */
export type GetRecentHistoryResponse = Message$1<"chat.v1.GetRecentHistoryResponse"> & {
  /**
   * @generated from field: repeated chat.v1.ConvoHistory conversations = 1;
   */
  conversations: ConvoHistory[];
};

/**
 * Describes the message chat.v1.GetRecentHistoryResponse.
 * Use `create(GetRecentHistoryResponseSchema)` to create a new message.
 */
export const GetRecentHistoryResponseSchema: GenMessage<GetRecentHistoryResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 23);

/**
 * @generated from message chat.v1.MoveFolderPositionRequest
 */
export type MoveFolderPositionRequest = Message$1<"chat.v1.MoveFolderPositionRequest"> & {
  /**
   * @generated from field: string a_folder_id = 1;
   */
  aFolderId: string;

  /**
   * @generated from field: string b_folder_id = 2;
   */
  bFolderId: string;
};

/**
 * Describes the message chat.v1.MoveFolderPositionRequest.
 * Use `create(MoveFolderPositionRequestSchema)` to create a new message.
 */
export const MoveFolderPositionRequestSchema: GenMessage<MoveFolderPositionRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 24);

/**
 * @generated from message chat.v1.MoveFolderPositionResponse
 */
export type MoveFolderPositionResponse = Message$1<"chat.v1.MoveFolderPositionResponse"> & {
};

/**
 * Describes the message chat.v1.MoveFolderPositionResponse.
 * Use `create(MoveFolderPositionResponseSchema)` to create a new message.
 */
export const MoveFolderPositionResponseSchema: GenMessage<MoveFolderPositionResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 25);

/**
 * @generated from message chat.v1.DeleteConvoRequest
 */
export type DeleteConvoRequest = Message$1<"chat.v1.DeleteConvoRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message chat.v1.DeleteConvoRequest.
 * Use `create(DeleteConvoRequestSchema)` to create a new message.
 */
export const DeleteConvoRequestSchema: GenMessage<DeleteConvoRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 26);

/**
 * @generated from message chat.v1.DeleteConvoResponse
 */
export type DeleteConvoResponse = Message$1<"chat.v1.DeleteConvoResponse"> & {
};

/**
 * Describes the message chat.v1.DeleteConvoResponse.
 * Use `create(DeleteConvoResponseSchema)` to create a new message.
 */
export const DeleteConvoResponseSchema: GenMessage<DeleteConvoResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 27);

/**
 * @generated from message chat.v1.RenameConvoRequest
 */
export type RenameConvoRequest = Message$1<"chat.v1.RenameConvoRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string new_title = 2;
   */
  newTitle: string;
};

/**
 * Describes the message chat.v1.RenameConvoRequest.
 * Use `create(RenameConvoRequestSchema)` to create a new message.
 */
export const RenameConvoRequestSchema: GenMessage<RenameConvoRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 28);

/**
 * @generated from message chat.v1.RenameConvoResponse
 */
export type RenameConvoResponse = Message$1<"chat.v1.RenameConvoResponse"> & {
};

/**
 * Describes the message chat.v1.RenameConvoResponse.
 * Use `create(RenameConvoResponseSchema)` to create a new message.
 */
export const RenameConvoResponseSchema: GenMessage<RenameConvoResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 29);

/**
 * @generated from message chat.v1.MoveConvoToFolderRequest
 */
export type MoveConvoToFolderRequest = Message$1<"chat.v1.MoveConvoToFolderRequest"> & {
  /**
   * @generated from field: string convo_id = 1;
   */
  convoId: string;

  /**
   * @generated from field: string folder_id = 2;
   */
  folderId: string;
};

/**
 * Describes the message chat.v1.MoveConvoToFolderRequest.
 * Use `create(MoveConvoToFolderRequestSchema)` to create a new message.
 */
export const MoveConvoToFolderRequestSchema: GenMessage<MoveConvoToFolderRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 30);

/**
 * @generated from message chat.v1.MoveConvoToFolderResponse
 */
export type MoveConvoToFolderResponse = Message$1<"chat.v1.MoveConvoToFolderResponse"> & {
};

/**
 * Describes the message chat.v1.MoveConvoToFolderResponse.
 * Use `create(MoveConvoToFolderResponseSchema)` to create a new message.
 */
export const MoveConvoToFolderResponseSchema: GenMessage<MoveConvoToFolderResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 31);

/**
 * @generated from message chat.v1.CreateFolderRequest
 */
export type CreateFolderRequest = Message$1<"chat.v1.CreateFolderRequest"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message chat.v1.CreateFolderRequest.
 * Use `create(CreateFolderRequestSchema)` to create a new message.
 */
export const CreateFolderRequestSchema: GenMessage<CreateFolderRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 32);

/**
 * @generated from message chat.v1.CreateFolderResponse
 */
export type CreateFolderResponse = Message$1<"chat.v1.CreateFolderResponse"> & {
  /**
   * @generated from field: chat.v1.ConvoFolder folder = 1;
   */
  folder?: ConvoFolder;
};

/**
 * Describes the message chat.v1.CreateFolderResponse.
 * Use `create(CreateFolderResponseSchema)` to create a new message.
 */
export const CreateFolderResponseSchema: GenMessage<CreateFolderResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 33);

/**
 * @generated from message chat.v1.DeleteFolderRequest
 */
export type DeleteFolderRequest = Message$1<"chat.v1.DeleteFolderRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: bool delete_children = 2;
   */
  deleteChildren: boolean;
};

/**
 * Describes the message chat.v1.DeleteFolderRequest.
 * Use `create(DeleteFolderRequestSchema)` to create a new message.
 */
export const DeleteFolderRequestSchema: GenMessage<DeleteFolderRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 34);

/**
 * @generated from message chat.v1.DeleteFolderResponse
 */
export type DeleteFolderResponse = Message$1<"chat.v1.DeleteFolderResponse"> & {
};

/**
 * Describes the message chat.v1.DeleteFolderResponse.
 * Use `create(DeleteFolderResponseSchema)` to create a new message.
 */
export const DeleteFolderResponseSchema: GenMessage<DeleteFolderResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 35);

/**
 * @generated from message chat.v1.GetConvoFoldersRequest
 */
export type GetConvoFoldersRequest = Message$1<"chat.v1.GetConvoFoldersRequest"> & {
};

/**
 * Describes the message chat.v1.GetConvoFoldersRequest.
 * Use `create(GetConvoFoldersRequestSchema)` to create a new message.
 */
export const GetConvoFoldersRequestSchema: GenMessage<GetConvoFoldersRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 36);

/**
 * @generated from message chat.v1.GetConvoFoldersResponse
 */
export type GetConvoFoldersResponse = Message$1<"chat.v1.GetConvoFoldersResponse"> & {
  /**
   * @generated from field: repeated chat.v1.ConvoFolder folders = 1;
   */
  folders: ConvoFolder[];
};

/**
 * Describes the message chat.v1.GetConvoFoldersResponse.
 * Use `create(GetConvoFoldersResponseSchema)` to create a new message.
 */
export const GetConvoFoldersResponseSchema: GenMessage<GetConvoFoldersResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 37);

/**
 * @generated from message chat.v1.ConvoFolder
 */
export type ConvoFolder = Message$1<"chat.v1.ConvoFolder"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: int32 pos = 3;
   */
  pos: number;
};

/**
 * Describes the message chat.v1.ConvoFolder.
 * Use `create(ConvoFolderSchema)` to create a new message.
 */
export const ConvoFolderSchema: GenMessage<ConvoFolder> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 38);

/**
 * @generated from message chat.v1.GetHistoryRequest
 */
export type GetHistoryRequest = Message$1<"chat.v1.GetHistoryRequest"> & {
  /**
   * @generated from field: int32 limit = 1;
   */
  limit: number;

  /**
   * @generated from field: int32 offset = 2;
   */
  offset: number;

  /**
   * @generated from field: bool reverse = 3;
   */
  reverse: boolean;

  /**
   * @generated from field: optional string query = 4;
   */
  query?: string;

  /**
   * @generated from field: optional string folder_id = 5;
   */
  folderId?: string;
};

/**
 * Describes the message chat.v1.GetHistoryRequest.
 * Use `create(GetHistoryRequestSchema)` to create a new message.
 */
export const GetHistoryRequestSchema: GenMessage<GetHistoryRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 39);

/**
 * @generated from message chat.v1.ConvoHistory
 */
export type ConvoHistory = Message$1<"chat.v1.ConvoHistory"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: optional string title = 2;
   */
  title?: string;

  /**
   * @generated from field: int64 updated_at = 3;
   */
  updatedAt: bigint;

  /**
   * @generated from field: int64 created_at = 4;
   */
  createdAt: bigint;

  /**
   * @generated from field: optional string folder_id = 5;
   */
  folderId?: string;
};

/**
 * Describes the message chat.v1.ConvoHistory.
 * Use `create(ConvoHistorySchema)` to create a new message.
 */
export const ConvoHistorySchema: GenMessage<ConvoHistory> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 40);

/**
 * @generated from message chat.v1.GetHistoryResponse
 */
export type GetHistoryResponse = Message$1<"chat.v1.GetHistoryResponse"> & {
  /**
   * @generated from field: repeated chat.v1.ConvoHistory conversations = 1;
   */
  conversations: ConvoHistory[];
};

/**
 * Describes the message chat.v1.GetHistoryResponse.
 * Use `create(GetHistoryResponseSchema)` to create a new message.
 */
export const GetHistoryResponseSchema: GenMessage<GetHistoryResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 41);

/**
 * @generated from message chat.v1.GetConvoRequest
 */
export type GetConvoRequest = Message$1<"chat.v1.GetConvoRequest"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;
};

/**
 * Describes the message chat.v1.GetConvoRequest.
 * Use `create(GetConvoRequestSchema)` to create a new message.
 */
export const GetConvoRequestSchema: GenMessage<GetConvoRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 42);

/**
 * @generated from message chat.v1.GetConvoResponse
 */
export type GetConvoResponse = Message$1<"chat.v1.GetConvoResponse"> & {
  /**
   * @generated from field: chat.v1.Conversation conversation = 1;
   */
  conversation?: Conversation;
};

/**
 * Describes the message chat.v1.GetConvoResponse.
 * Use `create(GetConvoResponseSchema)` to create a new message.
 */
export const GetConvoResponseSchema: GenMessage<GetConvoResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 43);

/**
 * @generated from message chat.v1.Conversation
 */
export type Conversation = Message$1<"chat.v1.Conversation"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: optional string title = 2;
   */
  title?: string;

  /**
   * @generated from field: optional int64 context_last_updated = 3;
   */
  contextLastUpdated?: bigint;

  /**
   * @generated from field: optional string context = 7;
   */
  context?: string;

  /**
   * @generated from field: int64 created_at = 4;
   */
  createdAt: bigint;

  /**
   * @generated from field: int64 updated_at = 5;
   */
  updatedAt: bigint;

  /**
   * @generated from field: optional string folder_id = 8;
   */
  folderId?: string;

  /**
   * @generated from field: optional string persona_id = 9;
   */
  personaId?: string;

  /**
   * @generated from field: repeated chat.v1.Message messages = 6;
   */
  messages: Message[];
};

/**
 * Describes the message chat.v1.Conversation.
 * Use `create(ConversationSchema)` to create a new message.
 */
export const ConversationSchema: GenMessage<Conversation> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 44);

/**
 * @generated from message chat.v1.MessageVersion
 */
export type MessageVersion = Message$1<"chat.v1.MessageVersion"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: int32 version_number = 2;
   */
  versionNumber: number;

  /**
   * @generated from field: int64 created_at = 3;
   */
  createdAt: bigint;

  /**
   * @generated from field: repeated chat.v1.MessagePart parts = 4;
   */
  parts: MessagePart[];

  /**
   * @generated from field: bool pending = 5;
   */
  pending: boolean;

  /**
   * @generated from field: optional string error = 6;
   */
  error?: string;
};

/**
 * Describes the message chat.v1.MessageVersion.
 * Use `create(MessageVersionSchema)` to create a new message.
 */
export const MessageVersionSchema: GenMessage<MessageVersion> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 45);

/**
 * @generated from message chat.v1.Message
 */
export type Message = Message$1<"chat.v1.Message"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: int32 position = 2;
   */
  position: number;

  /**
   * @generated from field: int32 index = 3;
   */
  index: number;

  /**
   * @generated from field: int64 created_at = 4;
   */
  createdAt: bigint;

  /**
   * @generated from field: int64 updated_at = 5;
   */
  updatedAt: bigint;

  /**
   * @generated from field: chat.v1.MessageRole role = 6;
   */
  role: MessageRole;

  /**
   * @generated from field: repeated chat.v1.MessageVersion versions = 7;
   */
  versions: MessageVersion[];
};

/**
 * Describes the message chat.v1.Message.
 * Use `create(MessageSchema)` to create a new message.
 */
export const MessageSchema: GenMessage<Message> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 46);

/**
 * Parts making up a message.
 * Parts are what we store in the database and contain all the data to render each part.
 * They are tied 1-1 with their corresponding service below (i.e. text part with text service).
 * The service is a stream of updates that modify the part in some way. The end result of a service 
 * should be a complete part. In other words, the sum of all the deltas from a service should equal
 * the final part stored in the message. 
 *
 * @generated from message chat.v1.MessagePart
 */
export type MessagePart = Message$1<"chat.v1.MessagePart"> & {
  /**
   * @generated from oneof chat.v1.MessagePart.part
   */
  part: {
    /**
     * @generated from field: chat.v1.TextPart text = 1;
     */
    value: TextPart;
    case: "text";
  } | {
    /**
     * @generated from field: chat.v1.ThinkingPart thinking = 2;
     */
    value: ThinkingPart;
    case: "thinking";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message chat.v1.MessagePart.
 * Use `create(MessagePartSchema)` to create a new message.
 */
export const MessagePartSchema: GenMessage<MessagePart> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 47);

/**
 * A part representing text/markdown
 *
 * @generated from message chat.v1.TextPart
 */
export type TextPart = Message$1<"chat.v1.TextPart"> & {
  /**
   * @generated from field: string content = 1;
   */
  content: string;
};

/**
 * Describes the message chat.v1.TextPart.
 * Use `create(TextPartSchema)` to create a new message.
 */
export const TextPartSchema: GenMessage<TextPart> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 48);

/**
 * @generated from message chat.v1.ThinkingPartStep
 */
export type ThinkingPartStep = Message$1<"chat.v1.ThinkingPartStep"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * i.e. "Finding sources..." or "Thinking..."
   *
   * @generated from field: string summary = 2;
   */
  summary: string;

  /**
   * more detailed info, i.e. sources found, reasoning steps, etc.
   *
   * @generated from field: repeated string detail = 3;
   */
  detail: string[];
};

/**
 * Describes the message chat.v1.ThinkingPartStep.
 * Use `create(ThinkingPartStepSchema)` to create a new message.
 */
export const ThinkingPartStepSchema: GenMessage<ThinkingPartStep> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 49);

/**
 * @generated from message chat.v1.ThinkingPart
 */
export type ThinkingPart = Message$1<"chat.v1.ThinkingPart"> & {
  /**
   * i.e. "Thought for 24 seconds"
   *
   * @generated from field: string summary = 1;
   */
  summary: string;

  /**
   * the steps taken during the thinking/processing process
   *
   * @generated from field: repeated chat.v1.ThinkingPartStep steps = 2;
   */
  steps: ThinkingPartStep[];

  /**
   * if we are using thinking from an llm that outputs it's thoughts, this is the complete thought. this gets passed as context to the llm
   *
   * @generated from field: optional string final_thought = 3;
   */
  finalThought?: string;
};

/**
 * Describes the message chat.v1.ThinkingPart.
 * Use `create(ThinkingPartSchema)` to create a new message.
 */
export const ThinkingPartSchema: GenMessage<ThinkingPart> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 50);

/**
 * @generated from message chat.v1.ChatOptions
 */
export type ChatOptions = Message$1<"chat.v1.ChatOptions"> & {
  /**
   * include tickers automatically inferred from chat or explicitly?
   *
   * @generated from field: bool ticker_auto = 1;
   */
  tickerAuto: boolean;

  /**
   * @generated from field: repeated string ticker_ids = 2;
   */
  tickerIds: string[];

  /**
   * should we include trade journal automatically or explicitly?
   *
   * @generated from field: bool journal_auto = 3;
   */
  journalAuto: boolean;

  /**
   * @generated from field: repeated string journal_ids = 4;
   */
  journalIds: string[];

  /**
   * should we fetch fresh data or re-use old calculations?
   *
   * @generated from field: bool fresh_data = 5;
   */
  freshData: boolean;

  /**
   * shoud we automatically infer indicators from the query or explicitly set?
   *
   * @generated from field: bool indicator_auto = 6;
   */
  indicatorAuto: boolean;

  /**
   * If set, use this persona for the chat. If it isn't it will use the default or last used persona.
   *
   * @generated from field: optional string persona_id = 7;
   */
  personaId?: string;

  /**
   * If set, will create the new convo in this folder and also include that folders instructions
   *
   * @generated from field: optional string folder_id = 8;
   */
  folderId?: string;
};

/**
 * Describes the message chat.v1.ChatOptions.
 * Use `create(ChatOptionsSchema)` to create a new message.
 */
export const ChatOptionsSchema: GenMessage<ChatOptions> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 51);

/**
 * @generated from message chat.v1.ChatMeta
 */
export type ChatMeta = Message$1<"chat.v1.ChatMeta"> & {
  /**
   * @generated from field: string timezone = 1;
   */
  timezone: string;

  /**
   * @generated from field: string locale = 2;
   */
  locale: string;
};

/**
 * Describes the message chat.v1.ChatMeta.
 * Use `create(ChatMetaSchema)` to create a new message.
 */
export const ChatMetaSchema: GenMessage<ChatMeta> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 52);

/**
 * @generated from message chat.v1.ChatRequest
 */
export type ChatRequest = Message$1<"chat.v1.ChatRequest"> & {
  /**
   * The information this can either be a new chat/continuing, editing or retrying a message
   *
   * @generated from oneof chat.v1.ChatRequest.info
   */
  info: {
    /**
     * @generated from field: chat.v1.ChatInfo chat = 1;
     */
    value: ChatInfo;
    case: "chat";
  } | {
    /**
     * @generated from field: chat.v1.EditInfo edit = 2;
     */
    value: EditInfo;
    case: "edit";
  } | {
    /**
     * @generated from field: chat.v1.RetryInfo retry = 3;
     */
    value: RetryInfo;
    case: "retry";
  } | { case: undefined; value?: undefined };

  /**
   * @generated from field: chat.v1.ChatMeta meta = 6;
   */
  meta?: ChatMeta;

  /**
   * @generated from field: chat.v1.ChatOptions options = 7;
   */
  options?: ChatOptions;
};

/**
 * Describes the message chat.v1.ChatRequest.
 * Use `create(ChatRequestSchema)` to create a new message.
 */
export const ChatRequestSchema: GenMessage<ChatRequest> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 53);

/**
 * For retrying a (bot) message
 *
 * @generated from message chat.v1.RetryInfo
 */
export type RetryInfo = Message$1<"chat.v1.RetryInfo"> & {
  /**
   * @generated from field: string convo_id = 1;
   */
  convoId: string;

  /**
   * the message to retry. This must be a bot/assistant role message. NOT the users message.
   *
   * @generated from field: string bot_message_id = 2;
   */
  botMessageId: string;

  /**
   * Append some additional info to the original user message that triggered the bot message.
   *
   * @generated from field: optional string additional_info = 3;
   */
  additionalInfo?: string;
};

/**
 * Describes the message chat.v1.RetryInfo.
 * Use `create(RetryInfoSchema)` to create a new message.
 */
export const RetryInfoSchema: GenMessage<RetryInfo> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 54);

/**
 * For editing an existing (user) message
 *
 * @generated from message chat.v1.EditInfo
 */
export type EditInfo = Message$1<"chat.v1.EditInfo"> & {
  /**
   * @generated from field: string convo_id = 1;
   */
  convoId: string;

  /**
   * the message to edit. This must be a user role message.
   *
   * @generated from field: string user_message_id = 2;
   */
  userMessageId: string;

  /**
   * @generated from field: string new_query = 3;
   */
  newQuery: string;
};

/**
 * Describes the message chat.v1.EditInfo.
 * Use `create(EditInfoSchema)` to create a new message.
 */
export const EditInfoSchema: GenMessage<EditInfo> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 55);

/**
 * For a new convo or continuing a conversation. Appends the message at the end of the convo.
 *
 * @generated from message chat.v1.ChatInfo
 */
export type ChatInfo = Message$1<"chat.v1.ChatInfo"> & {
  /**
   * @generated from field: string query = 1;
   */
  query: string;

  /**
   * if provided, the message will be added to a convo. If not, it will create a new convo
   * and return the new convo id in the NewConvoEvent
   *
   * @generated from field: optional string convo_id = 2;
   */
  convoId?: string;
};

/**
 * Describes the message chat.v1.ChatInfo.
 * Use `create(ChatInfoSchema)` to create a new message.
 */
export const ChatInfoSchema: GenMessage<ChatInfo> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 56);

/**
 * @generated from message chat.v1.ChatResponse
 */
export type ChatResponse = Message$1<"chat.v1.ChatResponse"> & {
  /**
   * @generated from oneof chat.v1.ChatResponse.message
   */
  message: {
    /**
     * @generated from field: chat.v1.ServiceEvent service_event = 1;
     */
    value: ServiceEvent;
    case: "serviceEvent";
  } | {
    /**
     * @generated from field: chat.v1.NewConvoEvent new_convo_event = 2;
     */
    value: NewConvoEvent;
    case: "newConvoEvent";
  } | {
    /**
     * @generated from field: chat.v1.ErrorEvent error_event = 3;
     */
    value: ErrorEvent;
    case: "errorEvent";
  } | {
    /**
     * @generated from field: chat.v1.ConvoUpdateEvent convo_update_event = 4;
     */
    value: ConvoUpdateEvent;
    case: "convoUpdateEvent";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message chat.v1.ChatResponse.
 * Use `create(ChatResponseSchema)` to create a new message.
 */
export const ChatResponseSchema: GenMessage<ChatResponse> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 57);

/**
 * After a new convo is created and the summary is created,
 * we want to optimistically update the history in the sidebar with this data
 *
 * @generated from message chat.v1.NewConvoEvent
 */
export type NewConvoEvent = Message$1<"chat.v1.NewConvoEvent"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string title = 2;
   */
  title: string;

  /**
   * @generated from field: optional string folder_id = 3;
   */
  folderId?: string;
};

/**
 * Describes the message chat.v1.NewConvoEvent.
 * Use `create(NewConvoEventSchema)` to create a new message.
 */
export const NewConvoEventSchema: GenMessage<NewConvoEvent> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 58);

/**
 * Send an update when a convo is updated, i.e. renamed
 *
 * @generated from message chat.v1.ConvoUpdateEvent
 */
export type ConvoUpdateEvent = Message$1<"chat.v1.ConvoUpdateEvent"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: optional string title = 2;
   */
  title?: string;
};

/**
 * Describes the message chat.v1.ConvoUpdateEvent.
 * Use `create(ConvoUpdateEventSchema)` to create a new message.
 */
export const ConvoUpdateEventSchema: GenMessage<ConvoUpdateEvent> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 59);

/**
 * @generated from message chat.v1.ErrorEvent
 */
export type ErrorEvent = Message$1<"chat.v1.ErrorEvent"> & {
  /**
   * @generated from field: string message = 1;
   */
  message: string;

  /**
   * @generated from field: optional string code = 2;
   */
  code?: string;
};

/**
 * Describes the message chat.v1.ErrorEvent.
 * Use `create(ErrorEventSchema)` to create a new message.
 */
export const ErrorEventSchema: GenMessage<ErrorEvent> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 60);

/**
 * The server decides ultimitaly which service to use. Right now we just have 
 * chat, but in the future we will have more
 *
 * @generated from message chat.v1.ServiceEvent
 */
export type ServiceEvent = Message$1<"chat.v1.ServiceEvent"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: chat.v1.ServiceStatus status = 2;
   */
  status: ServiceStatus;

  /**
   * code is an optional event code. i.e. for an error it could be "wrong_model" or something
   *
   * @generated from field: optional string code = 3;
   */
  code?: string;

  /**
   * @generated from oneof chat.v1.ServiceEvent.data
   */
  data: {
    /**
     * @generated from field: chat.v1.TextService chat = 4;
     */
    value: TextService;
    case: "chat";
  } | {
    /**
     * @generated from field: chat.v1.ThinkingService thinking = 5;
     */
    value: ThinkingService;
    case: "thinking";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message chat.v1.ServiceEvent.
 * Use `create(ServiceEventSchema)` to create a new message.
 */
export const ServiceEventSchema: GenMessage<ServiceEvent> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 61);

/**
 * The text service is for a standard text stream.
 * The delta is a partial response that should be appended to the current message.
 * The final_response is the complete response that is the result of all the deltas combined.
 *
 * @generated from message chat.v1.TextService
 */
export type TextService = Message$1<"chat.v1.TextService"> & {
  /**
   * @generated from field: optional string delta = 1;
   */
  delta?: string;

  /**
   * @generated from field: optional string final_response = 2;
   */
  finalResponse?: string;
};

/**
 * Describes the message chat.v1.TextService.
 * Use `create(TextServiceSchema)` to create a new message.
 */
export const TextServiceSchema: GenMessage<TextService> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 62);

/**
 * The thinking service is used for either reasoning or to indicate progress on a multi-step task.
 *
 * @generated from message chat.v1.ThinkingService
 */
export type ThinkingService = Message$1<"chat.v1.ThinkingService"> & {
  /**
   * Step id is unique to each step. It can be used to identify which step is being updated.
   * If step ID is not set, the other fields will be ignored (i.e. for a status update)
   *
   * @generated from field: optional string step_id = 1;
   */
  stepId?: string;

  /**
   * A brief summary of what this step is doing
   *
   * @generated from field: optional string step_summary = 2;
   */
  stepSummary?: string;

  /**
   * A more detailed update on the step's progress
   *
   * @generated from field: optional string step_update = 3;
   */
  stepUpdate?: string;

  /**
   * If we are using thinking from an llm that outputs it's thoughts, delta is the partial thought
   *
   * @generated from field: optional string delta = 4;
   */
  delta?: string;

  /**
   * final_thought is the complete thought that is the result of all the deltas combined.
   *
   * @generated from field: optional string final_thought = 5;
   */
  finalThought?: string;

  /**
   * The summary of the thinking process. For example, this could be 
   * "Thinking..." or "Researching..." or "Thought for 24 seconds"
   *
   * @generated from field: optional string summary = 6;
   */
  summary?: string;
};

/**
 * Describes the message chat.v1.ThinkingService.
 * Use `create(ThinkingServiceSchema)` to create a new message.
 */
export const ThinkingServiceSchema: GenMessage<ThinkingService> = /*@__PURE__*/
  messageDesc(file_chat_v1_chat, 63);

/**
 * @generated from enum chat.v1.ChatModel
 */
export enum ChatModel {
  /**
   * @generated from enum value: CHAT_MODEL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CHAT_MODEL_GEMINI = 1;
   */
  GEMINI = 1,

  /**
   * @generated from enum value: CHAT_MODEL_GROK = 2;
   */
  GROK = 2,

  /**
   * @generated from enum value: CHAT_MODEL_CLAUDE = 3;
   */
  CLAUDE = 3,

  /**
   * @generated from enum value: CHAT_MODEL_OPENAI = 4;
   */
  OPENAI = 4,

  /**
   * @generated from enum value: CHAT_MODEL_CUSTOM = 5;
   */
  CUSTOM = 5,
}

/**
 * Describes the enum chat.v1.ChatModel.
 */
export const ChatModelSchema: GenEnum<ChatModel> = /*@__PURE__*/
  enumDesc(file_chat_v1_chat, 0);

/**
 * @generated from enum chat.v1.MessageRole
 */
export enum MessageRole {
  /**
   * @generated from enum value: MESSAGE_ROLE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * user message
   *
   * @generated from enum value: MESSAGE_ROLE_USER = 1;
   */
  USER = 1,

  /**
   * assistant message
   *
   * @generated from enum value: MESSAGE_ROLE_ASSISTANT = 2;
   */
  ASSISTANT = 2,

  /**
   * system message, e.g. instructions
   *
   * @generated from enum value: MESSAGE_ROLE_SYSTEM = 3;
   */
  SYSTEM = 3,

  /**
   * @generated from enum value: MESSAGE_ROLE_TOOL = 4;
   */
  TOOL = 4,
}

/**
 * Describes the enum chat.v1.MessageRole.
 */
export const MessageRoleSchema: GenEnum<MessageRole> = /*@__PURE__*/
  enumDesc(file_chat_v1_chat, 1);

/**
 * @generated from enum chat.v1.ServiceStatus
 */
export enum ServiceStatus {
  /**
   * @generated from enum value: SERVICE_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SERVICE_STATUS_STARTED = 1;
   */
  STARTED = 1,

  /**
   * @generated from enum value: SERVICE_STATUS_COMPLETED = 2;
   */
  COMPLETED = 2,

  /**
   * @generated from enum value: SERVICE_STATUS_ERROR = 3;
   */
  ERROR = 3,

  /**
   * @generated from enum value: SERVICE_STATUS_DATA = 4;
   */
  DATA = 4,
}

/**
 * Describes the enum chat.v1.ServiceStatus.
 */
export const ServiceStatusSchema: GenEnum<ServiceStatus> = /*@__PURE__*/
  enumDesc(file_chat_v1_chat, 2);

/**
 * @generated from service chat.v1.ChatService
 */
export const ChatService: GenService<{
  /**
   * @generated from rpc chat.v1.ChatService.Chat
   */
  chat: {
    methodKind: "server_streaming";
    input: typeof ChatRequestSchema;
    output: typeof ChatResponseSchema;
  },
  /**
   * @generated from rpc chat.v1.ChatService.GetConvo
   */
  getConvo: {
    methodKind: "unary";
    input: typeof GetConvoRequestSchema;
    output: typeof GetConvoResponseSchema;
  },
  /**
   * @generated from rpc chat.v1.ChatService.GetHistory
   */
  getHistory: {
    methodKind: "unary";
    input: typeof GetHistoryRequestSchema;
    output: typeof GetHistoryResponseSchema;
  },
  /**
   * @generated from rpc chat.v1.ChatService.GetRecentHistory
   */
  getRecentHistory: {
    methodKind: "unary";
    input: typeof GetRecentHistoryRequestSchema;
    output: typeof GetRecentHistoryResponseSchema;
  },
  /**
   * @generated from rpc chat.v1.ChatService.GetConvoFolders
   */
  getConvoFolders: {
    methodKind: "unary";
    input: typeof GetConvoFoldersRequestSchema;
    output: typeof GetConvoFoldersResponseSchema;
  },
  /**
   * @generated from rpc chat.v1.ChatService.CreateFolder
   */
  createFolder: {
    methodKind: "unary";
    input: typeof CreateFolderRequestSchema;
    output: typeof CreateFolderResponseSchema;
  },
  /**
   * @generated from rpc chat.v1.ChatService.DeleteFolder
   */
  deleteFolder: {
    methodKind: "unary";
    input: typeof DeleteFolderRequestSchema;
    output: typeof DeleteFolderResponseSchema;
  },
  /**
   * @generated from rpc chat.v1.ChatService.RenameFolder
   */
  renameFolder: {
    methodKind: "unary";
    input: typeof RenameFolderRequestSchema;
    output: typeof RenameFolderResponseSchema;
  },
  /**
   * @generated from rpc chat.v1.ChatService.DeleteConvo
   */
  deleteConvo: {
    methodKind: "unary";
    input: typeof DeleteConvoRequestSchema;
    output: typeof DeleteConvoResponseSchema;
  },
  /**
   * @generated from rpc chat.v1.ChatService.RenameConvo
   */
  renameConvo: {
    methodKind: "unary";
    input: typeof RenameConvoRequestSchema;
    output: typeof RenameConvoResponseSchema;
  },
  /**
   * @generated from rpc chat.v1.ChatService.MoveConvoToFolder
   */
  moveConvoToFolder: {
    methodKind: "unary";
    input: typeof MoveConvoToFolderRequestSchema;
    output: typeof MoveConvoToFolderResponseSchema;
  },
  /**
   * @generated from rpc chat.v1.ChatService.MoveFolderPosition
   */
  moveFolderPosition: {
    methodKind: "unary";
    input: typeof MoveFolderPositionRequestSchema;
    output: typeof MoveFolderPositionResponseSchema;
  },
  /**
   * @generated from rpc chat.v1.ChatService.GetFolderInstructions
   */
  getFolderInstructions: {
    methodKind: "unary";
    input: typeof GetFolderInstructionsRequestSchema;
    output: typeof GetFolderInstructionsResponseSchema;
  },
  /**
   * @generated from rpc chat.v1.ChatService.UpdateFolderInstructions
   */
  updateFolderInstructions: {
    methodKind: "unary";
    input: typeof UpdateFolderInstructionsRequestSchema;
    output: typeof UpdateFolderInstructionsResponseSchema;
  },
  /**
   * @generated from rpc chat.v1.ChatService.CreatePersona
   */
  createPersona: {
    methodKind: "unary";
    input: typeof CreatePersonaRequestSchema;
    output: typeof CreatePersonaResponseSchema;
  },
  /**
   * @generated from rpc chat.v1.ChatService.DeletePersona
   */
  deletePersona: {
    methodKind: "unary";
    input: typeof DeletePersonaRequestSchema;
    output: typeof DeletePersonaResponseSchema;
  },
  /**
   * @generated from rpc chat.v1.ChatService.UpdatePersona
   */
  updatePersona: {
    methodKind: "unary";
    input: typeof UpdatePersonaRequestSchema;
    output: typeof UpdatePersonaResponseSchema;
  },
  /**
   * @generated from rpc chat.v1.ChatService.SetPersonaAsDefault
   */
  setPersonaAsDefault: {
    methodKind: "unary";
    input: typeof SetPersonaAsDefaultRequestSchema;
    output: typeof SetPersonaAsDefaultResponseSchema;
  },
  /**
   * @generated from rpc chat.v1.ChatService.GetPersonasList
   */
  getPersonasList: {
    methodKind: "unary";
    input: typeof GetPersonasListRequestSchema;
    output: typeof GetPersonasListResponseSchema;
  },
  /**
   * @generated from rpc chat.v1.ChatService.GetPersonaDetails
   */
  getPersonaDetails: {
    methodKind: "unary";
    input: typeof GetPersonaDetailsRequestSchema;
    output: typeof GetPersonaDetailsResponseSchema;
  },
  /**
   * @generated from rpc chat.v1.ChatService.GetDefaultPromptOptions
   */
  getDefaultPromptOptions: {
    methodKind: "unary";
    input: typeof GetDefaultPromptOptionsRequestSchema;
    output: typeof GetDefaultPromptOptionsResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_chat_v1_chat, 0);

