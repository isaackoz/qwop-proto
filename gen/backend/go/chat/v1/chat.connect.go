// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chat/v1/chat.proto

package v1

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ChatServiceName is the fully-qualified name of the ChatService service.
	ChatServiceName = "chat.v1.ChatService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ChatServiceChatProcedure is the fully-qualified name of the ChatService's Chat RPC.
	ChatServiceChatProcedure = "/chat.v1.ChatService/Chat"
	// ChatServiceGetConvoProcedure is the fully-qualified name of the ChatService's GetConvo RPC.
	ChatServiceGetConvoProcedure = "/chat.v1.ChatService/GetConvo"
	// ChatServiceGetHistoryProcedure is the fully-qualified name of the ChatService's GetHistory RPC.
	ChatServiceGetHistoryProcedure = "/chat.v1.ChatService/GetHistory"
	// ChatServiceGetRecentHistoryProcedure is the fully-qualified name of the ChatService's
	// GetRecentHistory RPC.
	ChatServiceGetRecentHistoryProcedure = "/chat.v1.ChatService/GetRecentHistory"
	// ChatServiceGetConvoFoldersProcedure is the fully-qualified name of the ChatService's
	// GetConvoFolders RPC.
	ChatServiceGetConvoFoldersProcedure = "/chat.v1.ChatService/GetConvoFolders"
	// ChatServiceCreateFolderProcedure is the fully-qualified name of the ChatService's CreateFolder
	// RPC.
	ChatServiceCreateFolderProcedure = "/chat.v1.ChatService/CreateFolder"
	// ChatServiceDeleteFolderProcedure is the fully-qualified name of the ChatService's DeleteFolder
	// RPC.
	ChatServiceDeleteFolderProcedure = "/chat.v1.ChatService/DeleteFolder"
	// ChatServiceRenameFolderProcedure is the fully-qualified name of the ChatService's RenameFolder
	// RPC.
	ChatServiceRenameFolderProcedure = "/chat.v1.ChatService/RenameFolder"
	// ChatServiceDeleteConvoProcedure is the fully-qualified name of the ChatService's DeleteConvo RPC.
	ChatServiceDeleteConvoProcedure = "/chat.v1.ChatService/DeleteConvo"
	// ChatServiceRenameConvoProcedure is the fully-qualified name of the ChatService's RenameConvo RPC.
	ChatServiceRenameConvoProcedure = "/chat.v1.ChatService/RenameConvo"
	// ChatServiceMoveConvoToFolderProcedure is the fully-qualified name of the ChatService's
	// MoveConvoToFolder RPC.
	ChatServiceMoveConvoToFolderProcedure = "/chat.v1.ChatService/MoveConvoToFolder"
	// ChatServiceMoveFolderPositionProcedure is the fully-qualified name of the ChatService's
	// MoveFolderPosition RPC.
	ChatServiceMoveFolderPositionProcedure = "/chat.v1.ChatService/MoveFolderPosition"
	// ChatServiceGetFolderInstructionsProcedure is the fully-qualified name of the ChatService's
	// GetFolderInstructions RPC.
	ChatServiceGetFolderInstructionsProcedure = "/chat.v1.ChatService/GetFolderInstructions"
	// ChatServiceUpdateFolderInstructionsProcedure is the fully-qualified name of the ChatService's
	// UpdateFolderInstructions RPC.
	ChatServiceUpdateFolderInstructionsProcedure = "/chat.v1.ChatService/UpdateFolderInstructions"
)

// ChatServiceClient is a client for the chat.v1.ChatService service.
type ChatServiceClient interface {
	Chat(context.Context, *connect.Request[ChatRequest]) (*connect.ServerStreamForClient[ChatResponse], error)
	GetConvo(context.Context, *connect.Request[GetConvoRequest]) (*connect.Response[GetConvoResponse], error)
	GetHistory(context.Context, *connect.Request[GetHistoryRequest]) (*connect.Response[GetHistoryResponse], error)
	GetRecentHistory(context.Context, *connect.Request[GetRecentHistoryRequest]) (*connect.Response[GetRecentHistoryResponse], error)
	GetConvoFolders(context.Context, *connect.Request[GetConvoFoldersRequest]) (*connect.Response[GetConvoFoldersResponse], error)
	CreateFolder(context.Context, *connect.Request[CreateFolderRequest]) (*connect.Response[CreateFolderResponse], error)
	DeleteFolder(context.Context, *connect.Request[DeleteFolderRequest]) (*connect.Response[DeleteFolderResponse], error)
	RenameFolder(context.Context, *connect.Request[RenameFolderRequest]) (*connect.Response[RenameFolderResponse], error)
	DeleteConvo(context.Context, *connect.Request[DeleteConvoRequest]) (*connect.Response[DeleteConvoResponse], error)
	RenameConvo(context.Context, *connect.Request[RenameConvoRequest]) (*connect.Response[RenameConvoResponse], error)
	MoveConvoToFolder(context.Context, *connect.Request[MoveConvoToFolderRequest]) (*connect.Response[MoveConvoToFolderResponse], error)
	MoveFolderPosition(context.Context, *connect.Request[MoveFolderPositionRequest]) (*connect.Response[MoveFolderPositionResponse], error)
	GetFolderInstructions(context.Context, *connect.Request[GetFolderInstructionsRequest]) (*connect.Response[GetFolderInstructionsResponse], error)
	UpdateFolderInstructions(context.Context, *connect.Request[UpdateFolderInstructionsRequest]) (*connect.Response[UpdateFolderInstructionsResponse], error)
}

// NewChatServiceClient constructs a client for the chat.v1.ChatService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewChatServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ChatServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	chatServiceMethods := File_chat_v1_chat_proto.Services().ByName("ChatService").Methods()
	return &chatServiceClient{
		chat: connect.NewClient[ChatRequest, ChatResponse](
			httpClient,
			baseURL+ChatServiceChatProcedure,
			connect.WithSchema(chatServiceMethods.ByName("Chat")),
			connect.WithClientOptions(opts...),
		),
		getConvo: connect.NewClient[GetConvoRequest, GetConvoResponse](
			httpClient,
			baseURL+ChatServiceGetConvoProcedure,
			connect.WithSchema(chatServiceMethods.ByName("GetConvo")),
			connect.WithClientOptions(opts...),
		),
		getHistory: connect.NewClient[GetHistoryRequest, GetHistoryResponse](
			httpClient,
			baseURL+ChatServiceGetHistoryProcedure,
			connect.WithSchema(chatServiceMethods.ByName("GetHistory")),
			connect.WithClientOptions(opts...),
		),
		getRecentHistory: connect.NewClient[GetRecentHistoryRequest, GetRecentHistoryResponse](
			httpClient,
			baseURL+ChatServiceGetRecentHistoryProcedure,
			connect.WithSchema(chatServiceMethods.ByName("GetRecentHistory")),
			connect.WithClientOptions(opts...),
		),
		getConvoFolders: connect.NewClient[GetConvoFoldersRequest, GetConvoFoldersResponse](
			httpClient,
			baseURL+ChatServiceGetConvoFoldersProcedure,
			connect.WithSchema(chatServiceMethods.ByName("GetConvoFolders")),
			connect.WithClientOptions(opts...),
		),
		createFolder: connect.NewClient[CreateFolderRequest, CreateFolderResponse](
			httpClient,
			baseURL+ChatServiceCreateFolderProcedure,
			connect.WithSchema(chatServiceMethods.ByName("CreateFolder")),
			connect.WithClientOptions(opts...),
		),
		deleteFolder: connect.NewClient[DeleteFolderRequest, DeleteFolderResponse](
			httpClient,
			baseURL+ChatServiceDeleteFolderProcedure,
			connect.WithSchema(chatServiceMethods.ByName("DeleteFolder")),
			connect.WithClientOptions(opts...),
		),
		renameFolder: connect.NewClient[RenameFolderRequest, RenameFolderResponse](
			httpClient,
			baseURL+ChatServiceRenameFolderProcedure,
			connect.WithSchema(chatServiceMethods.ByName("RenameFolder")),
			connect.WithClientOptions(opts...),
		),
		deleteConvo: connect.NewClient[DeleteConvoRequest, DeleteConvoResponse](
			httpClient,
			baseURL+ChatServiceDeleteConvoProcedure,
			connect.WithSchema(chatServiceMethods.ByName("DeleteConvo")),
			connect.WithClientOptions(opts...),
		),
		renameConvo: connect.NewClient[RenameConvoRequest, RenameConvoResponse](
			httpClient,
			baseURL+ChatServiceRenameConvoProcedure,
			connect.WithSchema(chatServiceMethods.ByName("RenameConvo")),
			connect.WithClientOptions(opts...),
		),
		moveConvoToFolder: connect.NewClient[MoveConvoToFolderRequest, MoveConvoToFolderResponse](
			httpClient,
			baseURL+ChatServiceMoveConvoToFolderProcedure,
			connect.WithSchema(chatServiceMethods.ByName("MoveConvoToFolder")),
			connect.WithClientOptions(opts...),
		),
		moveFolderPosition: connect.NewClient[MoveFolderPositionRequest, MoveFolderPositionResponse](
			httpClient,
			baseURL+ChatServiceMoveFolderPositionProcedure,
			connect.WithSchema(chatServiceMethods.ByName("MoveFolderPosition")),
			connect.WithClientOptions(opts...),
		),
		getFolderInstructions: connect.NewClient[GetFolderInstructionsRequest, GetFolderInstructionsResponse](
			httpClient,
			baseURL+ChatServiceGetFolderInstructionsProcedure,
			connect.WithSchema(chatServiceMethods.ByName("GetFolderInstructions")),
			connect.WithClientOptions(opts...),
		),
		updateFolderInstructions: connect.NewClient[UpdateFolderInstructionsRequest, UpdateFolderInstructionsResponse](
			httpClient,
			baseURL+ChatServiceUpdateFolderInstructionsProcedure,
			connect.WithSchema(chatServiceMethods.ByName("UpdateFolderInstructions")),
			connect.WithClientOptions(opts...),
		),
	}
}

// chatServiceClient implements ChatServiceClient.
type chatServiceClient struct {
	chat                     *connect.Client[ChatRequest, ChatResponse]
	getConvo                 *connect.Client[GetConvoRequest, GetConvoResponse]
	getHistory               *connect.Client[GetHistoryRequest, GetHistoryResponse]
	getRecentHistory         *connect.Client[GetRecentHistoryRequest, GetRecentHistoryResponse]
	getConvoFolders          *connect.Client[GetConvoFoldersRequest, GetConvoFoldersResponse]
	createFolder             *connect.Client[CreateFolderRequest, CreateFolderResponse]
	deleteFolder             *connect.Client[DeleteFolderRequest, DeleteFolderResponse]
	renameFolder             *connect.Client[RenameFolderRequest, RenameFolderResponse]
	deleteConvo              *connect.Client[DeleteConvoRequest, DeleteConvoResponse]
	renameConvo              *connect.Client[RenameConvoRequest, RenameConvoResponse]
	moveConvoToFolder        *connect.Client[MoveConvoToFolderRequest, MoveConvoToFolderResponse]
	moveFolderPosition       *connect.Client[MoveFolderPositionRequest, MoveFolderPositionResponse]
	getFolderInstructions    *connect.Client[GetFolderInstructionsRequest, GetFolderInstructionsResponse]
	updateFolderInstructions *connect.Client[UpdateFolderInstructionsRequest, UpdateFolderInstructionsResponse]
}

// Chat calls chat.v1.ChatService.Chat.
func (c *chatServiceClient) Chat(ctx context.Context, req *connect.Request[ChatRequest]) (*connect.ServerStreamForClient[ChatResponse], error) {
	return c.chat.CallServerStream(ctx, req)
}

// GetConvo calls chat.v1.ChatService.GetConvo.
func (c *chatServiceClient) GetConvo(ctx context.Context, req *connect.Request[GetConvoRequest]) (*connect.Response[GetConvoResponse], error) {
	return c.getConvo.CallUnary(ctx, req)
}

// GetHistory calls chat.v1.ChatService.GetHistory.
func (c *chatServiceClient) GetHistory(ctx context.Context, req *connect.Request[GetHistoryRequest]) (*connect.Response[GetHistoryResponse], error) {
	return c.getHistory.CallUnary(ctx, req)
}

// GetRecentHistory calls chat.v1.ChatService.GetRecentHistory.
func (c *chatServiceClient) GetRecentHistory(ctx context.Context, req *connect.Request[GetRecentHistoryRequest]) (*connect.Response[GetRecentHistoryResponse], error) {
	return c.getRecentHistory.CallUnary(ctx, req)
}

// GetConvoFolders calls chat.v1.ChatService.GetConvoFolders.
func (c *chatServiceClient) GetConvoFolders(ctx context.Context, req *connect.Request[GetConvoFoldersRequest]) (*connect.Response[GetConvoFoldersResponse], error) {
	return c.getConvoFolders.CallUnary(ctx, req)
}

// CreateFolder calls chat.v1.ChatService.CreateFolder.
func (c *chatServiceClient) CreateFolder(ctx context.Context, req *connect.Request[CreateFolderRequest]) (*connect.Response[CreateFolderResponse], error) {
	return c.createFolder.CallUnary(ctx, req)
}

// DeleteFolder calls chat.v1.ChatService.DeleteFolder.
func (c *chatServiceClient) DeleteFolder(ctx context.Context, req *connect.Request[DeleteFolderRequest]) (*connect.Response[DeleteFolderResponse], error) {
	return c.deleteFolder.CallUnary(ctx, req)
}

// RenameFolder calls chat.v1.ChatService.RenameFolder.
func (c *chatServiceClient) RenameFolder(ctx context.Context, req *connect.Request[RenameFolderRequest]) (*connect.Response[RenameFolderResponse], error) {
	return c.renameFolder.CallUnary(ctx, req)
}

// DeleteConvo calls chat.v1.ChatService.DeleteConvo.
func (c *chatServiceClient) DeleteConvo(ctx context.Context, req *connect.Request[DeleteConvoRequest]) (*connect.Response[DeleteConvoResponse], error) {
	return c.deleteConvo.CallUnary(ctx, req)
}

// RenameConvo calls chat.v1.ChatService.RenameConvo.
func (c *chatServiceClient) RenameConvo(ctx context.Context, req *connect.Request[RenameConvoRequest]) (*connect.Response[RenameConvoResponse], error) {
	return c.renameConvo.CallUnary(ctx, req)
}

// MoveConvoToFolder calls chat.v1.ChatService.MoveConvoToFolder.
func (c *chatServiceClient) MoveConvoToFolder(ctx context.Context, req *connect.Request[MoveConvoToFolderRequest]) (*connect.Response[MoveConvoToFolderResponse], error) {
	return c.moveConvoToFolder.CallUnary(ctx, req)
}

// MoveFolderPosition calls chat.v1.ChatService.MoveFolderPosition.
func (c *chatServiceClient) MoveFolderPosition(ctx context.Context, req *connect.Request[MoveFolderPositionRequest]) (*connect.Response[MoveFolderPositionResponse], error) {
	return c.moveFolderPosition.CallUnary(ctx, req)
}

// GetFolderInstructions calls chat.v1.ChatService.GetFolderInstructions.
func (c *chatServiceClient) GetFolderInstructions(ctx context.Context, req *connect.Request[GetFolderInstructionsRequest]) (*connect.Response[GetFolderInstructionsResponse], error) {
	return c.getFolderInstructions.CallUnary(ctx, req)
}

// UpdateFolderInstructions calls chat.v1.ChatService.UpdateFolderInstructions.
func (c *chatServiceClient) UpdateFolderInstructions(ctx context.Context, req *connect.Request[UpdateFolderInstructionsRequest]) (*connect.Response[UpdateFolderInstructionsResponse], error) {
	return c.updateFolderInstructions.CallUnary(ctx, req)
}

// ChatServiceHandler is an implementation of the chat.v1.ChatService service.
type ChatServiceHandler interface {
	Chat(context.Context, *connect.Request[ChatRequest], *connect.ServerStream[ChatResponse]) error
	GetConvo(context.Context, *connect.Request[GetConvoRequest]) (*connect.Response[GetConvoResponse], error)
	GetHistory(context.Context, *connect.Request[GetHistoryRequest]) (*connect.Response[GetHistoryResponse], error)
	GetRecentHistory(context.Context, *connect.Request[GetRecentHistoryRequest]) (*connect.Response[GetRecentHistoryResponse], error)
	GetConvoFolders(context.Context, *connect.Request[GetConvoFoldersRequest]) (*connect.Response[GetConvoFoldersResponse], error)
	CreateFolder(context.Context, *connect.Request[CreateFolderRequest]) (*connect.Response[CreateFolderResponse], error)
	DeleteFolder(context.Context, *connect.Request[DeleteFolderRequest]) (*connect.Response[DeleteFolderResponse], error)
	RenameFolder(context.Context, *connect.Request[RenameFolderRequest]) (*connect.Response[RenameFolderResponse], error)
	DeleteConvo(context.Context, *connect.Request[DeleteConvoRequest]) (*connect.Response[DeleteConvoResponse], error)
	RenameConvo(context.Context, *connect.Request[RenameConvoRequest]) (*connect.Response[RenameConvoResponse], error)
	MoveConvoToFolder(context.Context, *connect.Request[MoveConvoToFolderRequest]) (*connect.Response[MoveConvoToFolderResponse], error)
	MoveFolderPosition(context.Context, *connect.Request[MoveFolderPositionRequest]) (*connect.Response[MoveFolderPositionResponse], error)
	GetFolderInstructions(context.Context, *connect.Request[GetFolderInstructionsRequest]) (*connect.Response[GetFolderInstructionsResponse], error)
	UpdateFolderInstructions(context.Context, *connect.Request[UpdateFolderInstructionsRequest]) (*connect.Response[UpdateFolderInstructionsResponse], error)
}

// NewChatServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewChatServiceHandler(svc ChatServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	chatServiceMethods := File_chat_v1_chat_proto.Services().ByName("ChatService").Methods()
	chatServiceChatHandler := connect.NewServerStreamHandler(
		ChatServiceChatProcedure,
		svc.Chat,
		connect.WithSchema(chatServiceMethods.ByName("Chat")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceGetConvoHandler := connect.NewUnaryHandler(
		ChatServiceGetConvoProcedure,
		svc.GetConvo,
		connect.WithSchema(chatServiceMethods.ByName("GetConvo")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceGetHistoryHandler := connect.NewUnaryHandler(
		ChatServiceGetHistoryProcedure,
		svc.GetHistory,
		connect.WithSchema(chatServiceMethods.ByName("GetHistory")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceGetRecentHistoryHandler := connect.NewUnaryHandler(
		ChatServiceGetRecentHistoryProcedure,
		svc.GetRecentHistory,
		connect.WithSchema(chatServiceMethods.ByName("GetRecentHistory")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceGetConvoFoldersHandler := connect.NewUnaryHandler(
		ChatServiceGetConvoFoldersProcedure,
		svc.GetConvoFolders,
		connect.WithSchema(chatServiceMethods.ByName("GetConvoFolders")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceCreateFolderHandler := connect.NewUnaryHandler(
		ChatServiceCreateFolderProcedure,
		svc.CreateFolder,
		connect.WithSchema(chatServiceMethods.ByName("CreateFolder")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceDeleteFolderHandler := connect.NewUnaryHandler(
		ChatServiceDeleteFolderProcedure,
		svc.DeleteFolder,
		connect.WithSchema(chatServiceMethods.ByName("DeleteFolder")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceRenameFolderHandler := connect.NewUnaryHandler(
		ChatServiceRenameFolderProcedure,
		svc.RenameFolder,
		connect.WithSchema(chatServiceMethods.ByName("RenameFolder")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceDeleteConvoHandler := connect.NewUnaryHandler(
		ChatServiceDeleteConvoProcedure,
		svc.DeleteConvo,
		connect.WithSchema(chatServiceMethods.ByName("DeleteConvo")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceRenameConvoHandler := connect.NewUnaryHandler(
		ChatServiceRenameConvoProcedure,
		svc.RenameConvo,
		connect.WithSchema(chatServiceMethods.ByName("RenameConvo")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceMoveConvoToFolderHandler := connect.NewUnaryHandler(
		ChatServiceMoveConvoToFolderProcedure,
		svc.MoveConvoToFolder,
		connect.WithSchema(chatServiceMethods.ByName("MoveConvoToFolder")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceMoveFolderPositionHandler := connect.NewUnaryHandler(
		ChatServiceMoveFolderPositionProcedure,
		svc.MoveFolderPosition,
		connect.WithSchema(chatServiceMethods.ByName("MoveFolderPosition")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceGetFolderInstructionsHandler := connect.NewUnaryHandler(
		ChatServiceGetFolderInstructionsProcedure,
		svc.GetFolderInstructions,
		connect.WithSchema(chatServiceMethods.ByName("GetFolderInstructions")),
		connect.WithHandlerOptions(opts...),
	)
	chatServiceUpdateFolderInstructionsHandler := connect.NewUnaryHandler(
		ChatServiceUpdateFolderInstructionsProcedure,
		svc.UpdateFolderInstructions,
		connect.WithSchema(chatServiceMethods.ByName("UpdateFolderInstructions")),
		connect.WithHandlerOptions(opts...),
	)
	return "/chat.v1.ChatService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ChatServiceChatProcedure:
			chatServiceChatHandler.ServeHTTP(w, r)
		case ChatServiceGetConvoProcedure:
			chatServiceGetConvoHandler.ServeHTTP(w, r)
		case ChatServiceGetHistoryProcedure:
			chatServiceGetHistoryHandler.ServeHTTP(w, r)
		case ChatServiceGetRecentHistoryProcedure:
			chatServiceGetRecentHistoryHandler.ServeHTTP(w, r)
		case ChatServiceGetConvoFoldersProcedure:
			chatServiceGetConvoFoldersHandler.ServeHTTP(w, r)
		case ChatServiceCreateFolderProcedure:
			chatServiceCreateFolderHandler.ServeHTTP(w, r)
		case ChatServiceDeleteFolderProcedure:
			chatServiceDeleteFolderHandler.ServeHTTP(w, r)
		case ChatServiceRenameFolderProcedure:
			chatServiceRenameFolderHandler.ServeHTTP(w, r)
		case ChatServiceDeleteConvoProcedure:
			chatServiceDeleteConvoHandler.ServeHTTP(w, r)
		case ChatServiceRenameConvoProcedure:
			chatServiceRenameConvoHandler.ServeHTTP(w, r)
		case ChatServiceMoveConvoToFolderProcedure:
			chatServiceMoveConvoToFolderHandler.ServeHTTP(w, r)
		case ChatServiceMoveFolderPositionProcedure:
			chatServiceMoveFolderPositionHandler.ServeHTTP(w, r)
		case ChatServiceGetFolderInstructionsProcedure:
			chatServiceGetFolderInstructionsHandler.ServeHTTP(w, r)
		case ChatServiceUpdateFolderInstructionsProcedure:
			chatServiceUpdateFolderInstructionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedChatServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedChatServiceHandler struct{}

func (UnimplementedChatServiceHandler) Chat(context.Context, *connect.Request[ChatRequest], *connect.ServerStream[ChatResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.Chat is not implemented"))
}

func (UnimplementedChatServiceHandler) GetConvo(context.Context, *connect.Request[GetConvoRequest]) (*connect.Response[GetConvoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.GetConvo is not implemented"))
}

func (UnimplementedChatServiceHandler) GetHistory(context.Context, *connect.Request[GetHistoryRequest]) (*connect.Response[GetHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.GetHistory is not implemented"))
}

func (UnimplementedChatServiceHandler) GetRecentHistory(context.Context, *connect.Request[GetRecentHistoryRequest]) (*connect.Response[GetRecentHistoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.GetRecentHistory is not implemented"))
}

func (UnimplementedChatServiceHandler) GetConvoFolders(context.Context, *connect.Request[GetConvoFoldersRequest]) (*connect.Response[GetConvoFoldersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.GetConvoFolders is not implemented"))
}

func (UnimplementedChatServiceHandler) CreateFolder(context.Context, *connect.Request[CreateFolderRequest]) (*connect.Response[CreateFolderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.CreateFolder is not implemented"))
}

func (UnimplementedChatServiceHandler) DeleteFolder(context.Context, *connect.Request[DeleteFolderRequest]) (*connect.Response[DeleteFolderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.DeleteFolder is not implemented"))
}

func (UnimplementedChatServiceHandler) RenameFolder(context.Context, *connect.Request[RenameFolderRequest]) (*connect.Response[RenameFolderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.RenameFolder is not implemented"))
}

func (UnimplementedChatServiceHandler) DeleteConvo(context.Context, *connect.Request[DeleteConvoRequest]) (*connect.Response[DeleteConvoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.DeleteConvo is not implemented"))
}

func (UnimplementedChatServiceHandler) RenameConvo(context.Context, *connect.Request[RenameConvoRequest]) (*connect.Response[RenameConvoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.RenameConvo is not implemented"))
}

func (UnimplementedChatServiceHandler) MoveConvoToFolder(context.Context, *connect.Request[MoveConvoToFolderRequest]) (*connect.Response[MoveConvoToFolderResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.MoveConvoToFolder is not implemented"))
}

func (UnimplementedChatServiceHandler) MoveFolderPosition(context.Context, *connect.Request[MoveFolderPositionRequest]) (*connect.Response[MoveFolderPositionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.MoveFolderPosition is not implemented"))
}

func (UnimplementedChatServiceHandler) GetFolderInstructions(context.Context, *connect.Request[GetFolderInstructionsRequest]) (*connect.Response[GetFolderInstructionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.GetFolderInstructions is not implemented"))
}

func (UnimplementedChatServiceHandler) UpdateFolderInstructions(context.Context, *connect.Request[UpdateFolderInstructionsRequest]) (*connect.Response[UpdateFolderInstructionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("chat.v1.ChatService.UpdateFolderInstructions is not implemented"))
}
