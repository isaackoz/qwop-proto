// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: backend/auth/v1/auth.proto

package v1

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "backend.auth.v1.AuthService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuthServiceRegisterUserInfoProcedure is the fully-qualified name of the AuthService's
	// RegisterUserInfo RPC.
	AuthServiceRegisterUserInfoProcedure = "/backend.auth.v1.AuthService/RegisterUserInfo"
	// AuthServiceVerifyEmailProcedure is the fully-qualified name of the AuthService's VerifyEmail RPC.
	AuthServiceVerifyEmailProcedure = "/backend.auth.v1.AuthService/VerifyEmail"
	// AuthServiceCompleteRegistrationProcedure is the fully-qualified name of the AuthService's
	// CompleteRegistration RPC.
	AuthServiceCompleteRegistrationProcedure = "/backend.auth.v1.AuthService/CompleteRegistration"
	// AuthServiceCheckUsernameAvailableProcedure is the fully-qualified name of the AuthService's
	// CheckUsernameAvailable RPC.
	AuthServiceCheckUsernameAvailableProcedure = "/backend.auth.v1.AuthService/CheckUsernameAvailable"
	// AuthServicePasswordLoginProcedure is the fully-qualified name of the AuthService's PasswordLogin
	// RPC.
	AuthServicePasswordLoginProcedure = "/backend.auth.v1.AuthService/PasswordLogin"
	// AuthServiceLogoutProcedure is the fully-qualified name of the AuthService's Logout RPC.
	AuthServiceLogoutProcedure = "/backend.auth.v1.AuthService/Logout"
	// AuthServiceGetLoginMethodProcedure is the fully-qualified name of the AuthService's
	// GetLoginMethod RPC.
	AuthServiceGetLoginMethodProcedure = "/backend.auth.v1.AuthService/GetLoginMethod"
)

// AuthServiceClient is a client for the backend.auth.v1.AuthService service.
type AuthServiceClient interface {
	RegisterUserInfo(context.Context, *connect.Request[RegisterUserInfoRequest]) (*connect.Response[RegisterUserInfoResponse], error)
	VerifyEmail(context.Context, *connect.Request[VerifyEmailRequest]) (*connect.Response[VerifyEmailResponse], error)
	CompleteRegistration(context.Context, *connect.Request[CompleteRegistrationRequest]) (*connect.Response[CompleteRegistrationResponse], error)
	CheckUsernameAvailable(context.Context, *connect.Request[CheckUsernameAvailableRequest]) (*connect.Response[CheckUsernameAvailableResponse], error)
	PasswordLogin(context.Context, *connect.Request[PasswordLoginRequest]) (*connect.Response[PasswordLoginResponse], error)
	Logout(context.Context, *connect.Request[LogoutRequest]) (*connect.Response[LogoutResponse], error)
	GetLoginMethod(context.Context, *connect.Request[GetLoginMethodRequest]) (*connect.Response[GetLoginMethodResponse], error)
}

// NewAuthServiceClient constructs a client for the backend.auth.v1.AuthService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	authServiceMethods := File_backend_auth_v1_auth_proto.Services().ByName("AuthService").Methods()
	return &authServiceClient{
		registerUserInfo: connect.NewClient[RegisterUserInfoRequest, RegisterUserInfoResponse](
			httpClient,
			baseURL+AuthServiceRegisterUserInfoProcedure,
			connect.WithSchema(authServiceMethods.ByName("RegisterUserInfo")),
			connect.WithClientOptions(opts...),
		),
		verifyEmail: connect.NewClient[VerifyEmailRequest, VerifyEmailResponse](
			httpClient,
			baseURL+AuthServiceVerifyEmailProcedure,
			connect.WithSchema(authServiceMethods.ByName("VerifyEmail")),
			connect.WithClientOptions(opts...),
		),
		completeRegistration: connect.NewClient[CompleteRegistrationRequest, CompleteRegistrationResponse](
			httpClient,
			baseURL+AuthServiceCompleteRegistrationProcedure,
			connect.WithSchema(authServiceMethods.ByName("CompleteRegistration")),
			connect.WithClientOptions(opts...),
		),
		checkUsernameAvailable: connect.NewClient[CheckUsernameAvailableRequest, CheckUsernameAvailableResponse](
			httpClient,
			baseURL+AuthServiceCheckUsernameAvailableProcedure,
			connect.WithSchema(authServiceMethods.ByName("CheckUsernameAvailable")),
			connect.WithClientOptions(opts...),
		),
		passwordLogin: connect.NewClient[PasswordLoginRequest, PasswordLoginResponse](
			httpClient,
			baseURL+AuthServicePasswordLoginProcedure,
			connect.WithSchema(authServiceMethods.ByName("PasswordLogin")),
			connect.WithClientOptions(opts...),
		),
		logout: connect.NewClient[LogoutRequest, LogoutResponse](
			httpClient,
			baseURL+AuthServiceLogoutProcedure,
			connect.WithSchema(authServiceMethods.ByName("Logout")),
			connect.WithClientOptions(opts...),
		),
		getLoginMethod: connect.NewClient[GetLoginMethodRequest, GetLoginMethodResponse](
			httpClient,
			baseURL+AuthServiceGetLoginMethodProcedure,
			connect.WithSchema(authServiceMethods.ByName("GetLoginMethod")),
			connect.WithClientOptions(opts...),
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	registerUserInfo       *connect.Client[RegisterUserInfoRequest, RegisterUserInfoResponse]
	verifyEmail            *connect.Client[VerifyEmailRequest, VerifyEmailResponse]
	completeRegistration   *connect.Client[CompleteRegistrationRequest, CompleteRegistrationResponse]
	checkUsernameAvailable *connect.Client[CheckUsernameAvailableRequest, CheckUsernameAvailableResponse]
	passwordLogin          *connect.Client[PasswordLoginRequest, PasswordLoginResponse]
	logout                 *connect.Client[LogoutRequest, LogoutResponse]
	getLoginMethod         *connect.Client[GetLoginMethodRequest, GetLoginMethodResponse]
}

// RegisterUserInfo calls backend.auth.v1.AuthService.RegisterUserInfo.
func (c *authServiceClient) RegisterUserInfo(ctx context.Context, req *connect.Request[RegisterUserInfoRequest]) (*connect.Response[RegisterUserInfoResponse], error) {
	return c.registerUserInfo.CallUnary(ctx, req)
}

// VerifyEmail calls backend.auth.v1.AuthService.VerifyEmail.
func (c *authServiceClient) VerifyEmail(ctx context.Context, req *connect.Request[VerifyEmailRequest]) (*connect.Response[VerifyEmailResponse], error) {
	return c.verifyEmail.CallUnary(ctx, req)
}

// CompleteRegistration calls backend.auth.v1.AuthService.CompleteRegistration.
func (c *authServiceClient) CompleteRegistration(ctx context.Context, req *connect.Request[CompleteRegistrationRequest]) (*connect.Response[CompleteRegistrationResponse], error) {
	return c.completeRegistration.CallUnary(ctx, req)
}

// CheckUsernameAvailable calls backend.auth.v1.AuthService.CheckUsernameAvailable.
func (c *authServiceClient) CheckUsernameAvailable(ctx context.Context, req *connect.Request[CheckUsernameAvailableRequest]) (*connect.Response[CheckUsernameAvailableResponse], error) {
	return c.checkUsernameAvailable.CallUnary(ctx, req)
}

// PasswordLogin calls backend.auth.v1.AuthService.PasswordLogin.
func (c *authServiceClient) PasswordLogin(ctx context.Context, req *connect.Request[PasswordLoginRequest]) (*connect.Response[PasswordLoginResponse], error) {
	return c.passwordLogin.CallUnary(ctx, req)
}

// Logout calls backend.auth.v1.AuthService.Logout.
func (c *authServiceClient) Logout(ctx context.Context, req *connect.Request[LogoutRequest]) (*connect.Response[LogoutResponse], error) {
	return c.logout.CallUnary(ctx, req)
}

// GetLoginMethod calls backend.auth.v1.AuthService.GetLoginMethod.
func (c *authServiceClient) GetLoginMethod(ctx context.Context, req *connect.Request[GetLoginMethodRequest]) (*connect.Response[GetLoginMethodResponse], error) {
	return c.getLoginMethod.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the backend.auth.v1.AuthService service.
type AuthServiceHandler interface {
	RegisterUserInfo(context.Context, *connect.Request[RegisterUserInfoRequest]) (*connect.Response[RegisterUserInfoResponse], error)
	VerifyEmail(context.Context, *connect.Request[VerifyEmailRequest]) (*connect.Response[VerifyEmailResponse], error)
	CompleteRegistration(context.Context, *connect.Request[CompleteRegistrationRequest]) (*connect.Response[CompleteRegistrationResponse], error)
	CheckUsernameAvailable(context.Context, *connect.Request[CheckUsernameAvailableRequest]) (*connect.Response[CheckUsernameAvailableResponse], error)
	PasswordLogin(context.Context, *connect.Request[PasswordLoginRequest]) (*connect.Response[PasswordLoginResponse], error)
	Logout(context.Context, *connect.Request[LogoutRequest]) (*connect.Response[LogoutResponse], error)
	GetLoginMethod(context.Context, *connect.Request[GetLoginMethodRequest]) (*connect.Response[GetLoginMethodResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	authServiceMethods := File_backend_auth_v1_auth_proto.Services().ByName("AuthService").Methods()
	authServiceRegisterUserInfoHandler := connect.NewUnaryHandler(
		AuthServiceRegisterUserInfoProcedure,
		svc.RegisterUserInfo,
		connect.WithSchema(authServiceMethods.ByName("RegisterUserInfo")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceVerifyEmailHandler := connect.NewUnaryHandler(
		AuthServiceVerifyEmailProcedure,
		svc.VerifyEmail,
		connect.WithSchema(authServiceMethods.ByName("VerifyEmail")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceCompleteRegistrationHandler := connect.NewUnaryHandler(
		AuthServiceCompleteRegistrationProcedure,
		svc.CompleteRegistration,
		connect.WithSchema(authServiceMethods.ByName("CompleteRegistration")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceCheckUsernameAvailableHandler := connect.NewUnaryHandler(
		AuthServiceCheckUsernameAvailableProcedure,
		svc.CheckUsernameAvailable,
		connect.WithSchema(authServiceMethods.ByName("CheckUsernameAvailable")),
		connect.WithHandlerOptions(opts...),
	)
	authServicePasswordLoginHandler := connect.NewUnaryHandler(
		AuthServicePasswordLoginProcedure,
		svc.PasswordLogin,
		connect.WithSchema(authServiceMethods.ByName("PasswordLogin")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceLogoutHandler := connect.NewUnaryHandler(
		AuthServiceLogoutProcedure,
		svc.Logout,
		connect.WithSchema(authServiceMethods.ByName("Logout")),
		connect.WithHandlerOptions(opts...),
	)
	authServiceGetLoginMethodHandler := connect.NewUnaryHandler(
		AuthServiceGetLoginMethodProcedure,
		svc.GetLoginMethod,
		connect.WithSchema(authServiceMethods.ByName("GetLoginMethod")),
		connect.WithHandlerOptions(opts...),
	)
	return "/backend.auth.v1.AuthService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuthServiceRegisterUserInfoProcedure:
			authServiceRegisterUserInfoHandler.ServeHTTP(w, r)
		case AuthServiceVerifyEmailProcedure:
			authServiceVerifyEmailHandler.ServeHTTP(w, r)
		case AuthServiceCompleteRegistrationProcedure:
			authServiceCompleteRegistrationHandler.ServeHTTP(w, r)
		case AuthServiceCheckUsernameAvailableProcedure:
			authServiceCheckUsernameAvailableHandler.ServeHTTP(w, r)
		case AuthServicePasswordLoginProcedure:
			authServicePasswordLoginHandler.ServeHTTP(w, r)
		case AuthServiceLogoutProcedure:
			authServiceLogoutHandler.ServeHTTP(w, r)
		case AuthServiceGetLoginMethodProcedure:
			authServiceGetLoginMethodHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) RegisterUserInfo(context.Context, *connect.Request[RegisterUserInfoRequest]) (*connect.Response[RegisterUserInfoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.auth.v1.AuthService.RegisterUserInfo is not implemented"))
}

func (UnimplementedAuthServiceHandler) VerifyEmail(context.Context, *connect.Request[VerifyEmailRequest]) (*connect.Response[VerifyEmailResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.auth.v1.AuthService.VerifyEmail is not implemented"))
}

func (UnimplementedAuthServiceHandler) CompleteRegistration(context.Context, *connect.Request[CompleteRegistrationRequest]) (*connect.Response[CompleteRegistrationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.auth.v1.AuthService.CompleteRegistration is not implemented"))
}

func (UnimplementedAuthServiceHandler) CheckUsernameAvailable(context.Context, *connect.Request[CheckUsernameAvailableRequest]) (*connect.Response[CheckUsernameAvailableResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.auth.v1.AuthService.CheckUsernameAvailable is not implemented"))
}

func (UnimplementedAuthServiceHandler) PasswordLogin(context.Context, *connect.Request[PasswordLoginRequest]) (*connect.Response[PasswordLoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.auth.v1.AuthService.PasswordLogin is not implemented"))
}

func (UnimplementedAuthServiceHandler) Logout(context.Context, *connect.Request[LogoutRequest]) (*connect.Response[LogoutResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.auth.v1.AuthService.Logout is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetLoginMethod(context.Context, *connect.Request[GetLoginMethodRequest]) (*connect.Response[GetLoginMethodResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.auth.v1.AuthService.GetLoginMethod is not implemented"))
}
