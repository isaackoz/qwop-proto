// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: backend/account/v1/account.proto

package v1

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AccountServiceName is the fully-qualified name of the AccountService service.
	AccountServiceName = "backend.account.v1.AccountService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AccountServiceUpdatePersonalSettingsProcedure is the fully-qualified name of the AccountService's
	// UpdatePersonalSettings RPC.
	AccountServiceUpdatePersonalSettingsProcedure = "/backend.account.v1.AccountService/UpdatePersonalSettings"
	// AccountServiceCheckUsernameAvailableProcedure is the fully-qualified name of the AccountService's
	// CheckUsernameAvailable RPC.
	AccountServiceCheckUsernameAvailableProcedure = "/backend.account.v1.AccountService/CheckUsernameAvailable"
)

// AccountServiceClient is a client for the backend.account.v1.AccountService service.
type AccountServiceClient interface {
	// Settings related rpcs
	UpdatePersonalSettings(context.Context, *connect.Request[UpdatePersonalSettingsRequest]) (*connect.Response[UpdatePersonalSettingsResponse], error)
	// User related rpcs
	CheckUsernameAvailable(context.Context, *connect.Request[CheckUsernameAvailableRequest]) (*connect.Response[CheckUsernameAvailableResponse], error)
}

// NewAccountServiceClient constructs a client for the backend.account.v1.AccountService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAccountServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AccountServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	accountServiceMethods := File_backend_account_v1_account_proto.Services().ByName("AccountService").Methods()
	return &accountServiceClient{
		updatePersonalSettings: connect.NewClient[UpdatePersonalSettingsRequest, UpdatePersonalSettingsResponse](
			httpClient,
			baseURL+AccountServiceUpdatePersonalSettingsProcedure,
			connect.WithSchema(accountServiceMethods.ByName("UpdatePersonalSettings")),
			connect.WithClientOptions(opts...),
		),
		checkUsernameAvailable: connect.NewClient[CheckUsernameAvailableRequest, CheckUsernameAvailableResponse](
			httpClient,
			baseURL+AccountServiceCheckUsernameAvailableProcedure,
			connect.WithSchema(accountServiceMethods.ByName("CheckUsernameAvailable")),
			connect.WithClientOptions(opts...),
		),
	}
}

// accountServiceClient implements AccountServiceClient.
type accountServiceClient struct {
	updatePersonalSettings *connect.Client[UpdatePersonalSettingsRequest, UpdatePersonalSettingsResponse]
	checkUsernameAvailable *connect.Client[CheckUsernameAvailableRequest, CheckUsernameAvailableResponse]
}

// UpdatePersonalSettings calls backend.account.v1.AccountService.UpdatePersonalSettings.
func (c *accountServiceClient) UpdatePersonalSettings(ctx context.Context, req *connect.Request[UpdatePersonalSettingsRequest]) (*connect.Response[UpdatePersonalSettingsResponse], error) {
	return c.updatePersonalSettings.CallUnary(ctx, req)
}

// CheckUsernameAvailable calls backend.account.v1.AccountService.CheckUsernameAvailable.
func (c *accountServiceClient) CheckUsernameAvailable(ctx context.Context, req *connect.Request[CheckUsernameAvailableRequest]) (*connect.Response[CheckUsernameAvailableResponse], error) {
	return c.checkUsernameAvailable.CallUnary(ctx, req)
}

// AccountServiceHandler is an implementation of the backend.account.v1.AccountService service.
type AccountServiceHandler interface {
	// Settings related rpcs
	UpdatePersonalSettings(context.Context, *connect.Request[UpdatePersonalSettingsRequest]) (*connect.Response[UpdatePersonalSettingsResponse], error)
	// User related rpcs
	CheckUsernameAvailable(context.Context, *connect.Request[CheckUsernameAvailableRequest]) (*connect.Response[CheckUsernameAvailableResponse], error)
}

// NewAccountServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAccountServiceHandler(svc AccountServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	accountServiceMethods := File_backend_account_v1_account_proto.Services().ByName("AccountService").Methods()
	accountServiceUpdatePersonalSettingsHandler := connect.NewUnaryHandler(
		AccountServiceUpdatePersonalSettingsProcedure,
		svc.UpdatePersonalSettings,
		connect.WithSchema(accountServiceMethods.ByName("UpdatePersonalSettings")),
		connect.WithHandlerOptions(opts...),
	)
	accountServiceCheckUsernameAvailableHandler := connect.NewUnaryHandler(
		AccountServiceCheckUsernameAvailableProcedure,
		svc.CheckUsernameAvailable,
		connect.WithSchema(accountServiceMethods.ByName("CheckUsernameAvailable")),
		connect.WithHandlerOptions(opts...),
	)
	return "/backend.account.v1.AccountService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AccountServiceUpdatePersonalSettingsProcedure:
			accountServiceUpdatePersonalSettingsHandler.ServeHTTP(w, r)
		case AccountServiceCheckUsernameAvailableProcedure:
			accountServiceCheckUsernameAvailableHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAccountServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAccountServiceHandler struct{}

func (UnimplementedAccountServiceHandler) UpdatePersonalSettings(context.Context, *connect.Request[UpdatePersonalSettingsRequest]) (*connect.Response[UpdatePersonalSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.account.v1.AccountService.UpdatePersonalSettings is not implemented"))
}

func (UnimplementedAccountServiceHandler) CheckUsernameAvailable(context.Context, *connect.Request[CheckUsernameAvailableRequest]) (*connect.Response[CheckUsernameAvailableResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.account.v1.AccountService.CheckUsernameAvailable is not implemented"))
}
