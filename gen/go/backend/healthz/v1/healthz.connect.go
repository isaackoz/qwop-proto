// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: backend/healthz/v1/healthz.proto

package v1

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// HealthzServiceName is the fully-qualified name of the HealthzService service.
	HealthzServiceName = "backend.healthz.v1.HealthzService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// HealthzServiceGetPingProcedure is the fully-qualified name of the HealthzService's GetPing RPC.
	HealthzServiceGetPingProcedure = "/backend.healthz.v1.HealthzService/GetPing"
	// HealthzServiceGetStatusProcedure is the fully-qualified name of the HealthzService's GetStatus
	// RPC.
	HealthzServiceGetStatusProcedure = "/backend.healthz.v1.HealthzService/GetStatus"
)

// HealthzServiceClient is a client for the backend.healthz.v1.HealthzService service.
type HealthzServiceClient interface {
	GetPing(context.Context, *connect.Request[GetPingRequest]) (*connect.Response[GetPingResponse], error)
	GetStatus(context.Context, *connect.Request[GetStatusRequest]) (*connect.Response[GetStatusResponse], error)
}

// NewHealthzServiceClient constructs a client for the backend.healthz.v1.HealthzService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewHealthzServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) HealthzServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	healthzServiceMethods := File_backend_healthz_v1_healthz_proto.Services().ByName("HealthzService").Methods()
	return &healthzServiceClient{
		getPing: connect.NewClient[GetPingRequest, GetPingResponse](
			httpClient,
			baseURL+HealthzServiceGetPingProcedure,
			connect.WithSchema(healthzServiceMethods.ByName("GetPing")),
			connect.WithClientOptions(opts...),
		),
		getStatus: connect.NewClient[GetStatusRequest, GetStatusResponse](
			httpClient,
			baseURL+HealthzServiceGetStatusProcedure,
			connect.WithSchema(healthzServiceMethods.ByName("GetStatus")),
			connect.WithClientOptions(opts...),
		),
	}
}

// healthzServiceClient implements HealthzServiceClient.
type healthzServiceClient struct {
	getPing   *connect.Client[GetPingRequest, GetPingResponse]
	getStatus *connect.Client[GetStatusRequest, GetStatusResponse]
}

// GetPing calls backend.healthz.v1.HealthzService.GetPing.
func (c *healthzServiceClient) GetPing(ctx context.Context, req *connect.Request[GetPingRequest]) (*connect.Response[GetPingResponse], error) {
	return c.getPing.CallUnary(ctx, req)
}

// GetStatus calls backend.healthz.v1.HealthzService.GetStatus.
func (c *healthzServiceClient) GetStatus(ctx context.Context, req *connect.Request[GetStatusRequest]) (*connect.Response[GetStatusResponse], error) {
	return c.getStatus.CallUnary(ctx, req)
}

// HealthzServiceHandler is an implementation of the backend.healthz.v1.HealthzService service.
type HealthzServiceHandler interface {
	GetPing(context.Context, *connect.Request[GetPingRequest]) (*connect.Response[GetPingResponse], error)
	GetStatus(context.Context, *connect.Request[GetStatusRequest]) (*connect.Response[GetStatusResponse], error)
}

// NewHealthzServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewHealthzServiceHandler(svc HealthzServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	healthzServiceMethods := File_backend_healthz_v1_healthz_proto.Services().ByName("HealthzService").Methods()
	healthzServiceGetPingHandler := connect.NewUnaryHandler(
		HealthzServiceGetPingProcedure,
		svc.GetPing,
		connect.WithSchema(healthzServiceMethods.ByName("GetPing")),
		connect.WithHandlerOptions(opts...),
	)
	healthzServiceGetStatusHandler := connect.NewUnaryHandler(
		HealthzServiceGetStatusProcedure,
		svc.GetStatus,
		connect.WithSchema(healthzServiceMethods.ByName("GetStatus")),
		connect.WithHandlerOptions(opts...),
	)
	return "/backend.healthz.v1.HealthzService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case HealthzServiceGetPingProcedure:
			healthzServiceGetPingHandler.ServeHTTP(w, r)
		case HealthzServiceGetStatusProcedure:
			healthzServiceGetStatusHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedHealthzServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedHealthzServiceHandler struct{}

func (UnimplementedHealthzServiceHandler) GetPing(context.Context, *connect.Request[GetPingRequest]) (*connect.Response[GetPingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.healthz.v1.HealthzService.GetPing is not implemented"))
}

func (UnimplementedHealthzServiceHandler) GetStatus(context.Context, *connect.Request[GetStatusRequest]) (*connect.Response[GetStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("backend.healthz.v1.HealthzService.GetStatus is not implemented"))
}
